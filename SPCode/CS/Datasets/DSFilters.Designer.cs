using System.Text.RegularExpressions;
using System.Diagnostics;
using System;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Collections;
using System.Drawing;
using Microsoft.VisualBasic;
using System.Data.SqlClient;
using System.Data;
using System.Collections.Generic;
using WeifenLuo.WinFormsUI;
using Microsoft.Win32;
using WeifenLuo;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




///<summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
namespace SoftLogik.Win
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), global::System.Xml.Serialization.XmlRootAttribute("DSFilters"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]public partial class DSFilters : global::System.Data.DataSet
	{
		
		
		private SPFilterTableDataTable tableSPFilterTable;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DSFilters()
		{
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			base.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected DSFilters(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
		{
			if (this.IsBinarySerialized(info, context) == true)
			{
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				return;
			}
			string strSchema = System.Convert.ToString(info.GetValue("XmlSchema", typeof(string)));
			if (this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if (!(ds.Tables["SPFilterTable"]) == null)
				{
					base.Tables.Add(new SPFilterTableDataTable(ds.Tables["SPFilterTable"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPFilterTableDataTable SPFilterTable
		{
			get
			{
				return this.tableSPFilterTable;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.BrowsableAttribute(true), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataSet Clone()
		{
			DSFilters cln = (DSFilters) (base.Clone());
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
		{
			if (this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if (!(ds.Tables["SPFilterTable"]) == null)
				{
					base.Tables.Add(new SPFilterTableDataTable(ds.Tables["SPFilterTable"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
		{
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars(bool initTable)
		{
			this.tableSPFilterTable = (SPFilterTableDataTable) (base.Tables["SPFilterTable"]);
			if (initTable == true)
			{
				if (this.tableSPFilterTable != null)
				{
					this.tableSPFilterTable.InitVars();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
		{
			this.DataSetName = "DSFilters";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/Reporting.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableSPFilterTable = new SPFilterTableDataTable();
			base.Tables.Add(this.tableSPFilterTable);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPFilterTable()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
		{
			if (e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)
			{
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			DSFilters ds = new DSFilters();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace))
			{
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try
				{
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext())
					{
						schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if (s1.Length == s2.Length)
						{
							s1.Position = 0;
							s2.Position = 0;
							
							while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
							{
								
								
							}
							if (s1.Position == s1.Length)
							{
								return type;
							}
						}
						
					}
				}
				finally
				{
					if (s1 != null)
					{
						s1.Close();
					}
					if (s2 != null)
					{
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		public delegate void SPFilterTableRowChangeEventHandler(object sender, SPFilterTableRowChangeEvent e);
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPFilterTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnFilterID;
			
			private global::System.Data.DataColumn columnField;
			
			private global::System.Data.DataColumn columnOperation;
			
			private global::System.Data.DataColumn columnValue;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableDataTable()
			{
				this.TableName = "SPFilterTable";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPFilterTableDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPFilterTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn FilterIDColumn
			{
				get
				{
					return this.columnFilterID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn FieldColumn
			{
				get
				{
					return this.columnField;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn OperationColumn
			{
				get
				{
					return this.columnOperation;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn ValueColumn
			{
				get
				{
					return this.columnValue;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRow this[int index]
			{
				get
				{
					return ((SPFilterTableRow) (this.Rows[index]));
				}
			}
			
			private SPFilterTableRowChangeEventHandler SPFilterTableRowChangingEvent;
			public event SPFilterTableRowChangeEventHandler SPFilterTableRowChanging
			{
				add
				{
					SPFilterTableRowChangingEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Combine(SPFilterTableRowChangingEvent, value);
				}
				remove
				{
					SPFilterTableRowChangingEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Remove(SPFilterTableRowChangingEvent, value);
				}
			}
			
			
			private SPFilterTableRowChangeEventHandler SPFilterTableRowChangedEvent;
			public event SPFilterTableRowChangeEventHandler SPFilterTableRowChanged
			{
				add
				{
					SPFilterTableRowChangedEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Combine(SPFilterTableRowChangedEvent, value);
				}
				remove
				{
					SPFilterTableRowChangedEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Remove(SPFilterTableRowChangedEvent, value);
				}
			}
			
			
			private SPFilterTableRowChangeEventHandler SPFilterTableRowDeletingEvent;
			public event SPFilterTableRowChangeEventHandler SPFilterTableRowDeleting
			{
				add
				{
					SPFilterTableRowDeletingEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Combine(SPFilterTableRowDeletingEvent, value);
				}
				remove
				{
					SPFilterTableRowDeletingEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Remove(SPFilterTableRowDeletingEvent, value);
				}
			}
			
			
			private SPFilterTableRowChangeEventHandler SPFilterTableRowDeletedEvent;
			public event SPFilterTableRowChangeEventHandler SPFilterTableRowDeleted
			{
				add
				{
					SPFilterTableRowDeletedEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Combine(SPFilterTableRowDeletedEvent, value);
				}
				remove
				{
					SPFilterTableRowDeletedEvent = (SPFilterTableRowChangeEventHandler) System.Delegate.Remove(SPFilterTableRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPFilterTableRow(SPFilterTableRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRow AddSPFilterTableRow(string Field, string Operation, string Value)
			{
				SPFilterTableRow rowSPFilterTableRow = (SPFilterTableRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, Field, Operation, Value};
				rowSPFilterTableRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPFilterTableRow);
				return rowSPFilterTableRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRow FindByFilterID(int FilterID)
			{
				return ((SPFilterTableRow) (this.Rows.Find(new object[] {FilterID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPFilterTableDataTable cln = (SPFilterTableDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPFilterTableDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnFilterID = base.Columns["FilterID"];
				this.columnField = base.Columns["Field"];
				this.columnOperation = base.Columns["Operation"];
				this.columnValue = base.Columns["Value"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnFilterID = new global::System.Data.DataColumn("FilterID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnFilterID);
				this.columnField = new global::System.Data.DataColumn("Field", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnField);
				this.columnOperation = new global::System.Data.DataColumn("Operation", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnOperation);
				this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnValue);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnFilterID}, true));
				this.columnFilterID.AutoIncrement = true;
				this.columnFilterID.AllowDBNull = false;
				this.columnFilterID.Unique = true;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRow NewSPFilterTableRow()
			{
				return ((SPFilterTableRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPFilterTableRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPFilterTableRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPFilterTableRowChangedEvent != null)
				{
					if (SPFilterTableRowChangedEvent != null)
						SPFilterTableRowChangedEvent(this, new SPFilterTableRowChangeEvent(((SPFilterTableRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPFilterTableRowChangingEvent != null)
				{
					if (SPFilterTableRowChangingEvent != null)
						SPFilterTableRowChangingEvent(this, new SPFilterTableRowChangeEvent(((SPFilterTableRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPFilterTableRowDeletedEvent != null)
				{
					if (SPFilterTableRowDeletedEvent != null)
						SPFilterTableRowDeletedEvent(this, new SPFilterTableRowChangeEvent(((SPFilterTableRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPFilterTableRowDeletingEvent != null)
				{
					if (SPFilterTableRowDeletingEvent != null)
						SPFilterTableRowDeletingEvent(this, new SPFilterTableRowChangeEvent(((SPFilterTableRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPFilterTableRow(SPFilterTableRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				DSFilters ds = new DSFilters();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPFilterTableDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPFilterTableRow : global::System.Data.DataRow
		{
			
			
			private SPFilterTableDataTable tableSPFilterTable;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPFilterTableRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPFilterTable = (SPFilterTableDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int FilterID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPFilterTable.FilterIDColumn]);
				}
				set
				{
					this[this.tableSPFilterTable.FilterIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Field
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPFilterTable.FieldColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Field\' in table \'SPFilterTable\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPFilterTable.FieldColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Operation
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPFilterTable.OperationColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Operation\' in table \'SPFilterTable\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPFilterTable.OperationColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Value
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPFilterTable.ValueColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'SPFilterTable\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPFilterTable.ValueColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsFieldNull()
			{
				return this.IsNull(this.tableSPFilterTable.FieldColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetFieldNull()
			{
				this[this.tableSPFilterTable.FieldColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsOperationNull()
			{
				return this.IsNull(this.tableSPFilterTable.OperationColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetOperationNull()
			{
				this[this.tableSPFilterTable.OperationColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsValueNull()
			{
				return this.IsNull(this.tableSPFilterTable.ValueColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetValueNull()
			{
				this[this.tableSPFilterTable.ValueColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPFilterTableRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPFilterTableRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRowChangeEvent(SPFilterTableRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPFilterTableRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
	
}
