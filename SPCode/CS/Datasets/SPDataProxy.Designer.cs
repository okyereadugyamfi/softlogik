using System.Text.RegularExpressions;
using System.Diagnostics;
using System;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Collections;
using System.Drawing;
using Microsoft.VisualBasic;
using System.Data.SqlClient;
using System.Data;
using System.Collections.Generic;
using WeifenLuo.WinFormsUI;
using Microsoft.Win32;
using WeifenLuo;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




///<summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
namespace SoftLogik.Win
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), global::System.Xml.Serialization.XmlRootAttribute("SPDataProxy"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]public partial class SPDataProxy : global::System.Data.DataSet
	{
		
		
		private SPMasterDataTable tableSPMaster;
		
		private SPNotesDataTable tableSPNotes;
		
		private SPAutoIdDataTable tableSPAutoId;
		
		private SPCompanyDataTable tableSPCompany;
		
		private SPPayModeDataTable tableSPPayMode;
		
		private SPLookupDataTable tableSPLookup;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPDataProxy()
		{
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			base.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPDataProxy(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
		{
			if (this.IsBinarySerialized(info, context) == true)
			{
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				return;
			}
			string strSchema = System.Convert.ToString(info.GetValue("XmlSchema", typeof(string)));
			if (this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if (!(ds.Tables["SPMaster"]) == null)
				{
					base.Tables.Add(new SPMasterDataTable(ds.Tables["SPMaster"]));
				}
				if (!(ds.Tables["SPNotes"]) == null)
				{
					base.Tables.Add(new SPNotesDataTable(ds.Tables["SPNotes"]));
				}
				if (!(ds.Tables["SPAutoId"]) == null)
				{
					base.Tables.Add(new SPAutoIdDataTable(ds.Tables["SPAutoId"]));
				}
				if (!(ds.Tables["SPCompany"]) == null)
				{
					base.Tables.Add(new SPCompanyDataTable(ds.Tables["SPCompany"]));
				}
				if (!(ds.Tables["SPPayMode"]) == null)
				{
					base.Tables.Add(new SPPayModeDataTable(ds.Tables["SPPayMode"]));
				}
				if (!(ds.Tables["SPLookup"]) == null)
				{
					base.Tables.Add(new SPLookupDataTable(ds.Tables["SPLookup"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPMasterDataTable SPMaster
		{
			get
			{
				return this.tableSPMaster;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPNotesDataTable SPNotes
		{
			get
			{
				return this.tableSPNotes;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPAutoIdDataTable SPAutoId
		{
			get
			{
				return this.tableSPAutoId;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPCompanyDataTable SPCompany
		{
			get
			{
				return this.tableSPCompany;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPPayModeDataTable SPPayMode
		{
			get
			{
				return this.tableSPPayMode;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPLookupDataTable SPLookup
		{
			get
			{
				return this.tableSPLookup;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.BrowsableAttribute(true), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataSet Clone()
		{
			SPDataProxy cln = (SPDataProxy) (base.Clone());
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
		{
			if (this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if (!(ds.Tables["SPMaster"]) == null)
				{
					base.Tables.Add(new SPMasterDataTable(ds.Tables["SPMaster"]));
				}
				if (!(ds.Tables["SPNotes"]) == null)
				{
					base.Tables.Add(new SPNotesDataTable(ds.Tables["SPNotes"]));
				}
				if (!(ds.Tables["SPAutoId"]) == null)
				{
					base.Tables.Add(new SPAutoIdDataTable(ds.Tables["SPAutoId"]));
				}
				if (!(ds.Tables["SPCompany"]) == null)
				{
					base.Tables.Add(new SPCompanyDataTable(ds.Tables["SPCompany"]));
				}
				if (!(ds.Tables["SPPayMode"]) == null)
				{
					base.Tables.Add(new SPPayModeDataTable(ds.Tables["SPPayMode"]));
				}
				if (!(ds.Tables["SPLookup"]) == null)
				{
					base.Tables.Add(new SPLookupDataTable(ds.Tables["SPLookup"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
		{
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars(bool initTable)
		{
			this.tableSPMaster = (SPMasterDataTable) (base.Tables["SPMaster"]);
			if (initTable == true)
			{
				if (this.tableSPMaster != null)
				{
					this.tableSPMaster.InitVars();
				}
			}
			this.tableSPNotes = (SPNotesDataTable) (base.Tables["SPNotes"]);
			if (initTable == true)
			{
				if (this.tableSPNotes != null)
				{
					this.tableSPNotes.InitVars();
				}
			}
			this.tableSPAutoId = (SPAutoIdDataTable) (base.Tables["SPAutoId"]);
			if (initTable == true)
			{
				if (this.tableSPAutoId != null)
				{
					this.tableSPAutoId.InitVars();
				}
			}
			this.tableSPCompany = (SPCompanyDataTable) (base.Tables["SPCompany"]);
			if (initTable == true)
			{
				if (this.tableSPCompany != null)
				{
					this.tableSPCompany.InitVars();
				}
			}
			this.tableSPPayMode = (SPPayModeDataTable) (base.Tables["SPPayMode"]);
			if (initTable == true)
			{
				if (this.tableSPPayMode != null)
				{
					this.tableSPPayMode.InitVars();
				}
			}
			this.tableSPLookup = (SPLookupDataTable) (base.Tables["SPLookup"]);
			if (initTable == true)
			{
				if (this.tableSPLookup != null)
				{
					this.tableSPLookup.InitVars();
				}
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
		{
			this.DataSetName = "SPDataProxy";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/SPDataProxy.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableSPMaster = new SPMasterDataTable();
			base.Tables.Add(this.tableSPMaster);
			this.tableSPNotes = new SPNotesDataTable();
			base.Tables.Add(this.tableSPNotes);
			this.tableSPAutoId = new SPAutoIdDataTable();
			base.Tables.Add(this.tableSPAutoId);
			this.tableSPCompany = new SPCompanyDataTable();
			base.Tables.Add(this.tableSPCompany);
			this.tableSPPayMode = new SPPayModeDataTable();
			base.Tables.Add(this.tableSPPayMode);
			this.tableSPLookup = new SPLookupDataTable();
			base.Tables.Add(this.tableSPLookup);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPMaster()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPNotes()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPAutoId()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPCompany()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPPayMode()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPLookup()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
		{
			if (e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)
			{
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			SPDataProxy ds = new SPDataProxy();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace))
			{
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try
				{
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext())
					{
						schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if (s1.Length == s2.Length)
						{
							s1.Position = 0;
							s2.Position = 0;
							
							while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
							{
								
								
							}
							if (s1.Position == s1.Length)
							{
								return type;
							}
						}
						
					}
				}
				finally
				{
					if (s1 != null)
					{
						s1.Close();
					}
					if (s2 != null)
					{
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		public delegate void SPMasterRowChangeEventHandler(object sender, SPMasterRowChangeEvent e);
		
		public delegate void SPNotesRowChangeEventHandler(object sender, SPNotesRowChangeEvent e);
		
		public delegate void SPAutoIdRowChangeEventHandler(object sender, SPAutoIdRowChangeEvent e);
		
		public delegate void SPCompanyRowChangeEventHandler(object sender, SPCompanyRowChangeEvent e);
		
		public delegate void SPPayModeRowChangeEventHandler(object sender, SPPayModeRowChangeEvent e);
		
		public delegate void SPLookupRowChangeEventHandler(object sender, SPLookupRowChangeEvent e);
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPMasterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnMasterID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnNote;
			
			private global::System.Data.DataColumn columnTypeID;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterDataTable()
			{
				this.TableName = "SPMaster";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPMasterDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn MasterIDColumn
			{
				get
				{
					return this.columnMasterID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteColumn
			{
				get
				{
					return this.columnNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn TypeIDColumn
			{
				get
				{
					return this.columnTypeID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRow this[int index]
			{
				get
				{
					return ((SPMasterRow) (this.Rows[index]));
				}
			}
			
			private SPMasterRowChangeEventHandler SPMasterRowChangingEvent;
			public event SPMasterRowChangeEventHandler SPMasterRowChanging
			{
				add
				{
					SPMasterRowChangingEvent = (SPMasterRowChangeEventHandler) System.Delegate.Combine(SPMasterRowChangingEvent, value);
				}
				remove
				{
					SPMasterRowChangingEvent = (SPMasterRowChangeEventHandler) System.Delegate.Remove(SPMasterRowChangingEvent, value);
				}
			}
			
			
			private SPMasterRowChangeEventHandler SPMasterRowChangedEvent;
			public event SPMasterRowChangeEventHandler SPMasterRowChanged
			{
				add
				{
					SPMasterRowChangedEvent = (SPMasterRowChangeEventHandler) System.Delegate.Combine(SPMasterRowChangedEvent, value);
				}
				remove
				{
					SPMasterRowChangedEvent = (SPMasterRowChangeEventHandler) System.Delegate.Remove(SPMasterRowChangedEvent, value);
				}
			}
			
			
			private SPMasterRowChangeEventHandler SPMasterRowDeletingEvent;
			public event SPMasterRowChangeEventHandler SPMasterRowDeleting
			{
				add
				{
					SPMasterRowDeletingEvent = (SPMasterRowChangeEventHandler) System.Delegate.Combine(SPMasterRowDeletingEvent, value);
				}
				remove
				{
					SPMasterRowDeletingEvent = (SPMasterRowChangeEventHandler) System.Delegate.Remove(SPMasterRowDeletingEvent, value);
				}
			}
			
			
			private SPMasterRowChangeEventHandler SPMasterRowDeletedEvent;
			public event SPMasterRowChangeEventHandler SPMasterRowDeleted
			{
				add
				{
					SPMasterRowDeletedEvent = (SPMasterRowChangeEventHandler) System.Delegate.Combine(SPMasterRowDeletedEvent, value);
				}
				remove
				{
					SPMasterRowDeletedEvent = (SPMasterRowChangeEventHandler) System.Delegate.Remove(SPMasterRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPMasterRow(SPMasterRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRow AddSPMasterRow(string Name, string Note, string TypeID)
			{
				SPMasterRow rowSPMasterRow = (SPMasterRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, Name, Note, TypeID};
				rowSPMasterRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPMasterRow);
				return rowSPMasterRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRow FindByMasterID(long MasterID)
			{
				return ((SPMasterRow) (this.Rows.Find(new object[] {MasterID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPMasterDataTable cln = (SPMasterDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPMasterDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnMasterID = base.Columns["MasterID"];
				this.columnName = base.Columns["Name"];
				this.columnNote = base.Columns["Note"];
				this.columnTypeID = base.Columns["TypeID"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnMasterID = new global::System.Data.DataColumn("MasterID", typeof(long), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnMasterID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNote);
				this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnTypeID);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnMasterID}, true));
				this.columnMasterID.AutoIncrement = true;
				this.columnMasterID.AllowDBNull = false;
				this.columnMasterID.ReadOnly = true;
				this.columnMasterID.Unique = true;
				this.columnName.MaxLength = 50;
				this.columnNote.MaxLength = 1073741823;
				this.columnTypeID.AllowDBNull = false;
				this.columnTypeID.MaxLength = 5;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRow NewSPMasterRow()
			{
				return ((SPMasterRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPMasterRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPMasterRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPMasterRowChangedEvent != null)
				{
					if (SPMasterRowChangedEvent != null)
						SPMasterRowChangedEvent(this, new SPMasterRowChangeEvent(((SPMasterRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPMasterRowChangingEvent != null)
				{
					if (SPMasterRowChangingEvent != null)
						SPMasterRowChangingEvent(this, new SPMasterRowChangeEvent(((SPMasterRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPMasterRowDeletedEvent != null)
				{
					if (SPMasterRowDeletedEvent != null)
						SPMasterRowDeletedEvent(this, new SPMasterRowChangeEvent(((SPMasterRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPMasterRowDeletingEvent != null)
				{
					if (SPMasterRowDeletingEvent != null)
						SPMasterRowDeletingEvent(this, new SPMasterRowChangeEvent(((SPMasterRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPMasterRow(SPMasterRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPMasterDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPNotesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnNoteID;
			
			private global::System.Data.DataColumn columnUserID;
			
			private global::System.Data.DataColumn columnNoteText;
			
			private global::System.Data.DataColumn columnAlarmDate;
			
			private global::System.Data.DataColumn columnCreateDate;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesDataTable()
			{
				this.TableName = "SPNotes";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPNotesDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteIDColumn
			{
				get
				{
					return this.columnNoteID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn UserIDColumn
			{
				get
				{
					return this.columnUserID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteTextColumn
			{
				get
				{
					return this.columnNoteText;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn AlarmDateColumn
			{
				get
				{
					return this.columnAlarmDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CreateDateColumn
			{
				get
				{
					return this.columnCreateDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRow this[int index]
			{
				get
				{
					return ((SPNotesRow) (this.Rows[index]));
				}
			}
			
			private SPNotesRowChangeEventHandler SPNotesRowChangingEvent;
			public event SPNotesRowChangeEventHandler SPNotesRowChanging
			{
				add
				{
					SPNotesRowChangingEvent = (SPNotesRowChangeEventHandler) System.Delegate.Combine(SPNotesRowChangingEvent, value);
				}
				remove
				{
					SPNotesRowChangingEvent = (SPNotesRowChangeEventHandler) System.Delegate.Remove(SPNotesRowChangingEvent, value);
				}
			}
			
			
			private SPNotesRowChangeEventHandler SPNotesRowChangedEvent;
			public event SPNotesRowChangeEventHandler SPNotesRowChanged
			{
				add
				{
					SPNotesRowChangedEvent = (SPNotesRowChangeEventHandler) System.Delegate.Combine(SPNotesRowChangedEvent, value);
				}
				remove
				{
					SPNotesRowChangedEvent = (SPNotesRowChangeEventHandler) System.Delegate.Remove(SPNotesRowChangedEvent, value);
				}
			}
			
			
			private SPNotesRowChangeEventHandler SPNotesRowDeletingEvent;
			public event SPNotesRowChangeEventHandler SPNotesRowDeleting
			{
				add
				{
					SPNotesRowDeletingEvent = (SPNotesRowChangeEventHandler) System.Delegate.Combine(SPNotesRowDeletingEvent, value);
				}
				remove
				{
					SPNotesRowDeletingEvent = (SPNotesRowChangeEventHandler) System.Delegate.Remove(SPNotesRowDeletingEvent, value);
				}
			}
			
			
			private SPNotesRowChangeEventHandler SPNotesRowDeletedEvent;
			public event SPNotesRowChangeEventHandler SPNotesRowDeleted
			{
				add
				{
					SPNotesRowDeletedEvent = (SPNotesRowChangeEventHandler) System.Delegate.Combine(SPNotesRowDeletedEvent, value);
				}
				remove
				{
					SPNotesRowDeletedEvent = (SPNotesRowChangeEventHandler) System.Delegate.Remove(SPNotesRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPNotesRow(SPNotesRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRow AddSPNotesRow(string UserID, string NoteText, DateTime AlarmDate, DateTime CreateDate)
			{
				SPNotesRow rowSPNotesRow = (SPNotesRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, UserID, NoteText, AlarmDate, CreateDate};
				rowSPNotesRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPNotesRow);
				return rowSPNotesRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRow FindByNoteID(long NoteID)
			{
				return ((SPNotesRow) (this.Rows.Find(new object[] {NoteID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPNotesDataTable cln = (SPNotesDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPNotesDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnNoteID = base.Columns["NoteID"];
				this.columnUserID = base.Columns["UserID"];
				this.columnNoteText = base.Columns["NoteText"];
				this.columnAlarmDate = base.Columns["AlarmDate"];
				this.columnCreateDate = base.Columns["CreateDate"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnNoteID = new global::System.Data.DataColumn("NoteID", typeof(long), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNoteID);
				this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserID);
				this.columnNoteText = new global::System.Data.DataColumn("NoteText", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNoteText);
				this.columnAlarmDate = new global::System.Data.DataColumn("AlarmDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAlarmDate);
				this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCreateDate);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnNoteID}, true));
				this.columnNoteID.AutoIncrement = true;
				this.columnNoteID.AllowDBNull = false;
				this.columnNoteID.ReadOnly = true;
				this.columnNoteID.Unique = true;
				this.columnUserID.AllowDBNull = false;
				this.columnUserID.MaxLength = 50;
				this.columnNoteText.MaxLength = 1073741823;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRow NewSPNotesRow()
			{
				return ((SPNotesRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPNotesRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPNotesRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPNotesRowChangedEvent != null)
				{
					if (SPNotesRowChangedEvent != null)
						SPNotesRowChangedEvent(this, new SPNotesRowChangeEvent(((SPNotesRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPNotesRowChangingEvent != null)
				{
					if (SPNotesRowChangingEvent != null)
						SPNotesRowChangingEvent(this, new SPNotesRowChangeEvent(((SPNotesRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPNotesRowDeletedEvent != null)
				{
					if (SPNotesRowDeletedEvent != null)
						SPNotesRowDeletedEvent(this, new SPNotesRowChangeEvent(((SPNotesRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPNotesRowDeletingEvent != null)
				{
					if (SPNotesRowDeletingEvent != null)
						SPNotesRowDeletingEvent(this, new SPNotesRowChangeEvent(((SPNotesRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPNotesRow(SPNotesRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPNotesDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPAutoIdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnNewID;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdDataTable()
			{
				this.TableName = "SPAutoId";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPAutoIdDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPAutoIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NewIDColumn
			{
				get
				{
					return this.columnNewID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdRow this[int index]
			{
				get
				{
					return ((SPAutoIdRow) (this.Rows[index]));
				}
			}
			
			private SPAutoIdRowChangeEventHandler SPAutoIdRowChangingEvent;
			public event SPAutoIdRowChangeEventHandler SPAutoIdRowChanging
			{
				add
				{
					SPAutoIdRowChangingEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Combine(SPAutoIdRowChangingEvent, value);
				}
				remove
				{
					SPAutoIdRowChangingEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Remove(SPAutoIdRowChangingEvent, value);
				}
			}
			
			
			private SPAutoIdRowChangeEventHandler SPAutoIdRowChangedEvent;
			public event SPAutoIdRowChangeEventHandler SPAutoIdRowChanged
			{
				add
				{
					SPAutoIdRowChangedEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Combine(SPAutoIdRowChangedEvent, value);
				}
				remove
				{
					SPAutoIdRowChangedEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Remove(SPAutoIdRowChangedEvent, value);
				}
			}
			
			
			private SPAutoIdRowChangeEventHandler SPAutoIdRowDeletingEvent;
			public event SPAutoIdRowChangeEventHandler SPAutoIdRowDeleting
			{
				add
				{
					SPAutoIdRowDeletingEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Combine(SPAutoIdRowDeletingEvent, value);
				}
				remove
				{
					SPAutoIdRowDeletingEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Remove(SPAutoIdRowDeletingEvent, value);
				}
			}
			
			
			private SPAutoIdRowChangeEventHandler SPAutoIdRowDeletedEvent;
			public event SPAutoIdRowChangeEventHandler SPAutoIdRowDeleted
			{
				add
				{
					SPAutoIdRowDeletedEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Combine(SPAutoIdRowDeletedEvent, value);
				}
				remove
				{
					SPAutoIdRowDeletedEvent = (SPAutoIdRowChangeEventHandler) System.Delegate.Remove(SPAutoIdRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPAutoIdRow(SPAutoIdRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdRow AddSPAutoIdRow(string NewID)
			{
				SPAutoIdRow rowSPAutoIdRow = (SPAutoIdRow) (this.NewRow());
				object[] columnValuesArray = new object[] {NewID};
				rowSPAutoIdRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPAutoIdRow);
				return rowSPAutoIdRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPAutoIdDataTable cln = (SPAutoIdDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPAutoIdDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnNewID = base.Columns["NewID"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnNewID = new global::System.Data.DataColumn("NewID", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNewID);
				this.columnNewID.ReadOnly = true;
				this.columnNewID.MaxLength = 126;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdRow NewSPAutoIdRow()
			{
				return ((SPAutoIdRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPAutoIdRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPAutoIdRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPAutoIdRowChangedEvent != null)
				{
					if (SPAutoIdRowChangedEvent != null)
						SPAutoIdRowChangedEvent(this, new SPAutoIdRowChangeEvent(((SPAutoIdRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPAutoIdRowChangingEvent != null)
				{
					if (SPAutoIdRowChangingEvent != null)
						SPAutoIdRowChangingEvent(this, new SPAutoIdRowChangeEvent(((SPAutoIdRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPAutoIdRowDeletedEvent != null)
				{
					if (SPAutoIdRowDeletedEvent != null)
						SPAutoIdRowDeletedEvent(this, new SPAutoIdRowChangeEvent(((SPAutoIdRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPAutoIdRowDeletingEvent != null)
				{
					if (SPAutoIdRowDeletingEvent != null)
						SPAutoIdRowDeletingEvent(this, new SPAutoIdRowChangeEvent(((SPAutoIdRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPAutoIdRow(SPAutoIdRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPAutoIdDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPCompanyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnCompanyID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnPhoneList;
			
			private global::System.Data.DataColumn columnEmailAddress;
			
			private global::System.Data.DataColumn columnAddress1;
			
			private global::System.Data.DataColumn columnAddress2;
			
			private global::System.Data.DataColumn columnLogo;
			
			private global::System.Data.DataColumn columnMotto;
			
			private global::System.Data.DataColumn columnCustomNote;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyDataTable()
			{
				this.TableName = "SPCompany";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPCompanyDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPCompanyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CompanyIDColumn
			{
				get
				{
					return this.columnCompanyID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn PhoneListColumn
			{
				get
				{
					return this.columnPhoneList;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn EmailAddressColumn
			{
				get
				{
					return this.columnEmailAddress;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn Address1Column
			{
				get
				{
					return this.columnAddress1;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn Address2Column
			{
				get
				{
					return this.columnAddress2;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn LogoColumn
			{
				get
				{
					return this.columnLogo;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn MottoColumn
			{
				get
				{
					return this.columnMotto;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CustomNoteColumn
			{
				get
				{
					return this.columnCustomNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRow this[int index]
			{
				get
				{
					return ((SPCompanyRow) (this.Rows[index]));
				}
			}
			
			private SPCompanyRowChangeEventHandler SPCompanyRowChangingEvent;
			public event SPCompanyRowChangeEventHandler SPCompanyRowChanging
			{
				add
				{
					SPCompanyRowChangingEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Combine(SPCompanyRowChangingEvent, value);
				}
				remove
				{
					SPCompanyRowChangingEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Remove(SPCompanyRowChangingEvent, value);
				}
			}
			
			
			private SPCompanyRowChangeEventHandler SPCompanyRowChangedEvent;
			public event SPCompanyRowChangeEventHandler SPCompanyRowChanged
			{
				add
				{
					SPCompanyRowChangedEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Combine(SPCompanyRowChangedEvent, value);
				}
				remove
				{
					SPCompanyRowChangedEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Remove(SPCompanyRowChangedEvent, value);
				}
			}
			
			
			private SPCompanyRowChangeEventHandler SPCompanyRowDeletingEvent;
			public event SPCompanyRowChangeEventHandler SPCompanyRowDeleting
			{
				add
				{
					SPCompanyRowDeletingEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Combine(SPCompanyRowDeletingEvent, value);
				}
				remove
				{
					SPCompanyRowDeletingEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Remove(SPCompanyRowDeletingEvent, value);
				}
			}
			
			
			private SPCompanyRowChangeEventHandler SPCompanyRowDeletedEvent;
			public event SPCompanyRowChangeEventHandler SPCompanyRowDeleted
			{
				add
				{
					SPCompanyRowDeletedEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Combine(SPCompanyRowDeletedEvent, value);
				}
				remove
				{
					SPCompanyRowDeletedEvent = (SPCompanyRowChangeEventHandler) System.Delegate.Remove(SPCompanyRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPCompanyRow(SPCompanyRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRow AddSPCompanyRow(long CompanyID, string Name, string PhoneList, string EmailAddress, string Address1, string Address2, byte[] Logo, string Motto, string CustomNote)
			{
				SPCompanyRow rowSPCompanyRow = (SPCompanyRow) (this.NewRow());
				object[] columnValuesArray = new object[] {CompanyID, Name, PhoneList, EmailAddress, Address1, Address2, Logo, Motto, CustomNote};
				rowSPCompanyRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPCompanyRow);
				return rowSPCompanyRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRow FindByCompanyID(long CompanyID)
			{
				return ((SPCompanyRow) (this.Rows.Find(new object[] {CompanyID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPCompanyDataTable cln = (SPCompanyDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPCompanyDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnCompanyID = base.Columns["CompanyID"];
				this.columnName = base.Columns["Name"];
				this.columnPhoneList = base.Columns["PhoneList"];
				this.columnEmailAddress = base.Columns["EmailAddress"];
				this.columnAddress1 = base.Columns["Address1"];
				this.columnAddress2 = base.Columns["Address2"];
				this.columnLogo = base.Columns["Logo"];
				this.columnMotto = base.Columns["Motto"];
				this.columnCustomNote = base.Columns["CustomNote"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnCompanyID = new global::System.Data.DataColumn("CompanyID", typeof(long), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCompanyID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnPhoneList = new global::System.Data.DataColumn("PhoneList", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPhoneList);
				this.columnEmailAddress = new global::System.Data.DataColumn("EmailAddress", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnEmailAddress);
				this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAddress1);
				this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnAddress2);
				this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(byte), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLogo);
				this.columnMotto = new global::System.Data.DataColumn("Motto", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnMotto);
				this.columnCustomNote = new global::System.Data.DataColumn("CustomNote", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCustomNote);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnCompanyID}, true));
				this.columnCompanyID.AllowDBNull = false;
				this.columnCompanyID.Unique = true;
				this.columnName.MaxLength = 2147483647;
				this.columnPhoneList.MaxLength = 2147483647;
				this.columnEmailAddress.MaxLength = 50;
				this.columnAddress1.MaxLength = 2147483647;
				this.columnAddress2.MaxLength = 2147483647;
				this.columnMotto.MaxLength = 2147483647;
				this.columnCustomNote.MaxLength = 2147483647;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRow NewSPCompanyRow()
			{
				return ((SPCompanyRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPCompanyRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPCompanyRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPCompanyRowChangedEvent != null)
				{
					if (SPCompanyRowChangedEvent != null)
						SPCompanyRowChangedEvent(this, new SPCompanyRowChangeEvent(((SPCompanyRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPCompanyRowChangingEvent != null)
				{
					if (SPCompanyRowChangingEvent != null)
						SPCompanyRowChangingEvent(this, new SPCompanyRowChangeEvent(((SPCompanyRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPCompanyRowDeletedEvent != null)
				{
					if (SPCompanyRowDeletedEvent != null)
						SPCompanyRowDeletedEvent(this, new SPCompanyRowChangeEvent(((SPCompanyRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPCompanyRowDeletingEvent != null)
				{
					if (SPCompanyRowDeletingEvent != null)
						SPCompanyRowDeletingEvent(this, new SPCompanyRowChangeEvent(((SPCompanyRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPCompanyRow(SPCompanyRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPCompanyDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPPayModeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnPayModeID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnCategory;
			
			private global::System.Data.DataColumn columnBankID;
			
			private global::System.Data.DataColumn columnNote;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeDataTable()
			{
				this.TableName = "SPPayMode";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPPayModeDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPPayModeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn PayModeIDColumn
			{
				get
				{
					return this.columnPayModeID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CategoryColumn
			{
				get
				{
					return this.columnCategory;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn BankIDColumn
			{
				get
				{
					return this.columnBankID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteColumn
			{
				get
				{
					return this.columnNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRow this[int index]
			{
				get
				{
					return ((SPPayModeRow) (this.Rows[index]));
				}
			}
			
			private SPPayModeRowChangeEventHandler SPPayModeRowChangingEvent;
			public event SPPayModeRowChangeEventHandler SPPayModeRowChanging
			{
				add
				{
					SPPayModeRowChangingEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Combine(SPPayModeRowChangingEvent, value);
				}
				remove
				{
					SPPayModeRowChangingEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Remove(SPPayModeRowChangingEvent, value);
				}
			}
			
			
			private SPPayModeRowChangeEventHandler SPPayModeRowChangedEvent;
			public event SPPayModeRowChangeEventHandler SPPayModeRowChanged
			{
				add
				{
					SPPayModeRowChangedEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Combine(SPPayModeRowChangedEvent, value);
				}
				remove
				{
					SPPayModeRowChangedEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Remove(SPPayModeRowChangedEvent, value);
				}
			}
			
			
			private SPPayModeRowChangeEventHandler SPPayModeRowDeletingEvent;
			public event SPPayModeRowChangeEventHandler SPPayModeRowDeleting
			{
				add
				{
					SPPayModeRowDeletingEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Combine(SPPayModeRowDeletingEvent, value);
				}
				remove
				{
					SPPayModeRowDeletingEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Remove(SPPayModeRowDeletingEvent, value);
				}
			}
			
			
			private SPPayModeRowChangeEventHandler SPPayModeRowDeletedEvent;
			public event SPPayModeRowChangeEventHandler SPPayModeRowDeleted
			{
				add
				{
					SPPayModeRowDeletedEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Combine(SPPayModeRowDeletedEvent, value);
				}
				remove
				{
					SPPayModeRowDeletedEvent = (SPPayModeRowChangeEventHandler) System.Delegate.Remove(SPPayModeRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPPayModeRow(SPPayModeRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRow AddSPPayModeRow(string Name, string Category, long BankID, string Note)
			{
				SPPayModeRow rowSPPayModeRow = (SPPayModeRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, Name, Category, BankID, Note};
				rowSPPayModeRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPPayModeRow);
				return rowSPPayModeRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRow FindByPayModeID(long PayModeID)
			{
				return ((SPPayModeRow) (this.Rows.Find(new object[] {PayModeID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPPayModeDataTable cln = (SPPayModeDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPPayModeDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnPayModeID = base.Columns["PayModeID"];
				this.columnName = base.Columns["Name"];
				this.columnCategory = base.Columns["Category"];
				this.columnBankID = base.Columns["BankID"];
				this.columnNote = base.Columns["Note"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnPayModeID = new global::System.Data.DataColumn("PayModeID", typeof(long), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPayModeID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCategory);
				this.columnBankID = new global::System.Data.DataColumn("BankID", typeof(long), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnBankID);
				this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNote);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnPayModeID}, true));
				this.columnPayModeID.AutoIncrement = true;
				this.columnPayModeID.AllowDBNull = false;
				this.columnPayModeID.ReadOnly = true;
				this.columnPayModeID.Unique = true;
				this.columnName.MaxLength = 50;
				this.columnCategory.AllowDBNull = false;
				this.columnCategory.MaxLength = 10;
				this.columnBankID.AllowDBNull = false;
				this.columnNote.MaxLength = 1073741823;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRow NewSPPayModeRow()
			{
				return ((SPPayModeRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPPayModeRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPPayModeRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPPayModeRowChangedEvent != null)
				{
					if (SPPayModeRowChangedEvent != null)
						SPPayModeRowChangedEvent(this, new SPPayModeRowChangeEvent(((SPPayModeRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPPayModeRowChangingEvent != null)
				{
					if (SPPayModeRowChangingEvent != null)
						SPPayModeRowChangingEvent(this, new SPPayModeRowChangeEvent(((SPPayModeRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPPayModeRowDeletedEvent != null)
				{
					if (SPPayModeRowDeletedEvent != null)
						SPPayModeRowDeletedEvent(this, new SPPayModeRowChangeEvent(((SPPayModeRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPPayModeRowDeletingEvent != null)
				{
					if (SPPayModeRowDeletingEvent != null)
						SPPayModeRowDeletingEvent(this, new SPPayModeRowChangeEvent(((SPPayModeRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPPayModeRow(SPPayModeRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPPayModeDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPLookupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnID;
			
			private global::System.Data.DataColumn columnName;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupDataTable()
			{
				this.TableName = "SPLookup";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPLookupDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPLookupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn IDColumn
			{
				get
				{
					return this.columnID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupRow this[int index]
			{
				get
				{
					return ((SPLookupRow) (this.Rows[index]));
				}
			}
			
			private SPLookupRowChangeEventHandler SPLookupRowChangingEvent;
			public event SPLookupRowChangeEventHandler SPLookupRowChanging
			{
				add
				{
					SPLookupRowChangingEvent = (SPLookupRowChangeEventHandler) System.Delegate.Combine(SPLookupRowChangingEvent, value);
				}
				remove
				{
					SPLookupRowChangingEvent = (SPLookupRowChangeEventHandler) System.Delegate.Remove(SPLookupRowChangingEvent, value);
				}
			}
			
			
			private SPLookupRowChangeEventHandler SPLookupRowChangedEvent;
			public event SPLookupRowChangeEventHandler SPLookupRowChanged
			{
				add
				{
					SPLookupRowChangedEvent = (SPLookupRowChangeEventHandler) System.Delegate.Combine(SPLookupRowChangedEvent, value);
				}
				remove
				{
					SPLookupRowChangedEvent = (SPLookupRowChangeEventHandler) System.Delegate.Remove(SPLookupRowChangedEvent, value);
				}
			}
			
			
			private SPLookupRowChangeEventHandler SPLookupRowDeletingEvent;
			public event SPLookupRowChangeEventHandler SPLookupRowDeleting
			{
				add
				{
					SPLookupRowDeletingEvent = (SPLookupRowChangeEventHandler) System.Delegate.Combine(SPLookupRowDeletingEvent, value);
				}
				remove
				{
					SPLookupRowDeletingEvent = (SPLookupRowChangeEventHandler) System.Delegate.Remove(SPLookupRowDeletingEvent, value);
				}
			}
			
			
			private SPLookupRowChangeEventHandler SPLookupRowDeletedEvent;
			public event SPLookupRowChangeEventHandler SPLookupRowDeleted
			{
				add
				{
					SPLookupRowDeletedEvent = (SPLookupRowChangeEventHandler) System.Delegate.Combine(SPLookupRowDeletedEvent, value);
				}
				remove
				{
					SPLookupRowDeletedEvent = (SPLookupRowChangeEventHandler) System.Delegate.Remove(SPLookupRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPLookupRow(SPLookupRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupRow AddSPLookupRow(string ID, string Name)
			{
				SPLookupRow rowSPLookupRow = (SPLookupRow) (this.NewRow());
				object[] columnValuesArray = new object[] {ID, Name};
				rowSPLookupRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPLookupRow);
				return rowSPLookupRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPLookupDataTable cln = (SPLookupDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPLookupDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnID = base.Columns["ID"];
				this.columnName = base.Columns["Name"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnID.ReadOnly = true;
				this.columnID.MaxLength = 30;
				this.columnName.MaxLength = 50;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupRow NewSPLookupRow()
			{
				return ((SPLookupRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPLookupRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPLookupRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPLookupRowChangedEvent != null)
				{
					if (SPLookupRowChangedEvent != null)
						SPLookupRowChangedEvent(this, new SPLookupRowChangeEvent(((SPLookupRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPLookupRowChangingEvent != null)
				{
					if (SPLookupRowChangingEvent != null)
						SPLookupRowChangingEvent(this, new SPLookupRowChangeEvent(((SPLookupRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPLookupRowDeletedEvent != null)
				{
					if (SPLookupRowDeletedEvent != null)
						SPLookupRowDeletedEvent(this, new SPLookupRowChangeEvent(((SPLookupRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPLookupRowDeletingEvent != null)
				{
					if (SPLookupRowDeletingEvent != null)
						SPLookupRowDeletingEvent(this, new SPLookupRowChangeEvent(((SPLookupRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPLookupRow(SPLookupRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				SPDataProxy ds = new SPDataProxy();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPLookupDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPMasterRow : global::System.Data.DataRow
		{
			
			
			private SPMasterDataTable tableSPMaster;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPMasterRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPMaster = (SPMasterDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public long MasterID
			{
				get
				{
					return ((long) (this[this.tableSPMaster.MasterIDColumn]));
				}
				set
				{
					this[this.tableSPMaster.MasterIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Name
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPMaster.NameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SPMaster\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPMaster.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Note
			{
				get
				{
					if (this.IsNoteNull())
					{
						return null;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPMaster.NoteColumn]);
					}
				}
				set
				{
					this[this.tableSPMaster.NoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string TypeID
			{
				get
				{
					return System.Convert.ToString(this[this.tableSPMaster.TypeIDColumn]);
				}
				set
				{
					this[this.tableSPMaster.TypeIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNameNull()
			{
				return this.IsNull(this.tableSPMaster.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNameNull()
			{
				this[this.tableSPMaster.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteNull()
			{
				return this.IsNull(this.tableSPMaster.NoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteNull()
			{
				this[this.tableSPMaster.NoteColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPNotesRow : global::System.Data.DataRow
		{
			
			
			private SPNotesDataTable tableSPNotes;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPNotesRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPNotes = (SPNotesDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public long NoteID
			{
				get
				{
					return ((long) (this[this.tableSPNotes.NoteIDColumn]));
				}
				set
				{
					this[this.tableSPNotes.NoteIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string UserID
			{
				get
				{
					return System.Convert.ToString(this[this.tableSPNotes.UserIDColumn]);
				}
				set
				{
					this[this.tableSPNotes.UserIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string NoteText
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPNotes.NoteTextColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'NoteText\' in table \'SPNotes\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPNotes.NoteTextColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime AlarmDate
			{
				get
				{
					try
					{
						return System.Convert.ToDateTime(this[this.tableSPNotes.AlarmDateColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'AlarmDate\' in table \'SPNotes\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPNotes.AlarmDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime CreateDate
			{
				get
				{
					try
					{
						return System.Convert.ToDateTime(this[this.tableSPNotes.CreateDateColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'CreateDate\' in table \'SPNotes\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPNotes.CreateDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteTextNull()
			{
				return this.IsNull(this.tableSPNotes.NoteTextColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteTextNull()
			{
				this[this.tableSPNotes.NoteTextColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsAlarmDateNull()
			{
				return this.IsNull(this.tableSPNotes.AlarmDateColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetAlarmDateNull()
			{
				this[this.tableSPNotes.AlarmDateColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsCreateDateNull()
			{
				return this.IsNull(this.tableSPNotes.CreateDateColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetCreateDateNull()
			{
				this[this.tableSPNotes.CreateDateColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPAutoIdRow : global::System.Data.DataRow
		{
			
			
			private SPAutoIdDataTable tableSPAutoId;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPAutoIdRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPAutoId = (SPAutoIdDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string NewID
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPAutoId.NewIDColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'NewID\' in table \'SPAutoId\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPAutoId.NewIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNewIDNull()
			{
				return this.IsNull(this.tableSPAutoId.NewIDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNewIDNull()
			{
				this[this.tableSPAutoId.NewIDColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPCompanyRow : global::System.Data.DataRow
		{
			
			
			private SPCompanyDataTable tableSPCompany;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPCompanyRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPCompany = (SPCompanyDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public long CompanyID
			{
				get
				{
					return ((long) (this[this.tableSPCompany.CompanyIDColumn]));
				}
				set
				{
					this[this.tableSPCompany.CompanyIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Name
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPCompany.NameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SPCompany\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPCompany.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string PhoneList
			{
				get
				{
					if (this.IsPhoneListNull())
					{
						return string.Empty;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPCompany.PhoneListColumn]);
					}
				}
				set
				{
					this[this.tableSPCompany.PhoneListColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string EmailAddress
			{
				get
				{
					if (this.IsEmailAddressNull())
					{
						return string.Empty;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPCompany.EmailAddressColumn]);
					}
				}
				set
				{
					this[this.tableSPCompany.EmailAddressColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Address1
			{
				get
				{
					if (this.IsAddress1Null())
					{
						return string.Empty;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPCompany.Address1Column]);
					}
				}
				set
				{
					this[this.tableSPCompany.Address1Column] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Address2
			{
				get
				{
					if (this.IsAddress2Null())
					{
						return string.Empty;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPCompany.Address2Column]);
					}
				}
				set
				{
					this[this.tableSPCompany.Address2Column] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public byte[] Logo
			{
				get
				{
					try
					{
						return ((byte[]) (this[this.tableSPCompany.LogoColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'SPCompany\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPCompany.LogoColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Motto
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPCompany.MottoColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Motto\' in table \'SPCompany\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPCompany.MottoColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string CustomNote
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPCompany.CustomNoteColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'CustomNote\' in table \'SPCompany\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPCompany.CustomNoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNameNull()
			{
				return this.IsNull(this.tableSPCompany.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNameNull()
			{
				this[this.tableSPCompany.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsPhoneListNull()
			{
				return this.IsNull(this.tableSPCompany.PhoneListColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetPhoneListNull()
			{
				this[this.tableSPCompany.PhoneListColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsEmailAddressNull()
			{
				return this.IsNull(this.tableSPCompany.EmailAddressColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetEmailAddressNull()
			{
				this[this.tableSPCompany.EmailAddressColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsAddress1Null()
			{
				return this.IsNull(this.tableSPCompany.Address1Column);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetAddress1Null()
			{
				this[this.tableSPCompany.Address1Column] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsAddress2Null()
			{
				return this.IsNull(this.tableSPCompany.Address2Column);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetAddress2Null()
			{
				this[this.tableSPCompany.Address2Column] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsLogoNull()
			{
				return this.IsNull(this.tableSPCompany.LogoColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetLogoNull()
			{
				this[this.tableSPCompany.LogoColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsMottoNull()
			{
				return this.IsNull(this.tableSPCompany.MottoColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetMottoNull()
			{
				this[this.tableSPCompany.MottoColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsCustomNoteNull()
			{
				return this.IsNull(this.tableSPCompany.CustomNoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetCustomNoteNull()
			{
				this[this.tableSPCompany.CustomNoteColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPPayModeRow : global::System.Data.DataRow
		{
			
			
			private SPPayModeDataTable tableSPPayMode;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPPayModeRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPPayMode = (SPPayModeDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public long PayModeID
			{
				get
				{
					return ((long) (this[this.tableSPPayMode.PayModeIDColumn]));
				}
				set
				{
					this[this.tableSPPayMode.PayModeIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Name
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPPayMode.NameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SPPayMode\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPPayMode.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Category
			{
				get
				{
					return System.Convert.ToString(this[this.tableSPPayMode.CategoryColumn]);
				}
				set
				{
					this[this.tableSPPayMode.CategoryColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public long BankID
			{
				get
				{
					return ((long) (this[this.tableSPPayMode.BankIDColumn]));
				}
				set
				{
					this[this.tableSPPayMode.BankIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Note
			{
				get
				{
					if (this.IsNoteNull())
					{
						return string.Empty;
					}
					else
					{
						return System.Convert.ToString(this[this.tableSPPayMode.NoteColumn]);
					}
				}
				set
				{
					this[this.tableSPPayMode.NoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNameNull()
			{
				return this.IsNull(this.tableSPPayMode.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNameNull()
			{
				this[this.tableSPPayMode.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteNull()
			{
				return this.IsNull(this.tableSPPayMode.NoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteNull()
			{
				this[this.tableSPPayMode.NoteColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPLookupRow : global::System.Data.DataRow
		{
			
			
			private SPLookupDataTable tableSPLookup;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPLookupRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPLookup = (SPLookupDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string ID
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPLookup.IDColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'SPLookup\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPLookup.IDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Name
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPLookup.NameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SPLookup\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPLookup.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsIDNull()
			{
				return this.IsNull(this.tableSPLookup.IDColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetIDNull()
			{
				this[this.tableSPLookup.IDColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNameNull()
			{
				return this.IsNull(this.tableSPLookup.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNameNull()
			{
				this[this.tableSPLookup.NameColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPMasterRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPMasterRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRowChangeEvent(SPMasterRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPMasterRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPNotesRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPNotesRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRowChangeEvent(SPNotesRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPNotesRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPAutoIdRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPAutoIdRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdRowChangeEvent(SPAutoIdRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPAutoIdRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPCompanyRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPCompanyRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRowChangeEvent(SPCompanyRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPCompanyRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPPayModeRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPPayModeRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRowChangeEvent(SPPayModeRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPPayModeRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPLookupRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPLookupRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupRowChangeEvent(SPLookupRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPLookupRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
	
	namespace SPDataProxyTableAdapters
	{
		
		///<summary>
		///Represents the connection and commands used to retrieve and save data.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPMaster : global::System.ComponentModel.Component
		{
			
			
			private global::System.Data.SqlClient.SqlDataAdapter _adapter;
			
			private global::System.Data.SqlClient.SqlConnection _connection;
			
			private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
			
			private bool _clearBeforeFill;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPMaster()
			{
				this.ClearBeforeFill = true;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
			{
				get
				{
					if (this._adapter == null)
					{
						this.InitAdapter();
					}
					return this._adapter;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
			{
				get
				{
					if (this._connection == null)
					{
						this.InitConnection();
					}
					return this._connection;
				}
				set
				{
					this._connection = value;
					if (this.Adapter.InsertCommand != null)
					{
						this.Adapter.InsertCommand.Connection = value;
					}
					if (this.Adapter.DeleteCommand != null)
					{
						this.Adapter.DeleteCommand.Connection = value;
					}
					if (this.Adapter.UpdateCommand != null)
					{
						this.Adapter.UpdateCommand.Connection = value;
					}
					int i = 0;
					while (i < this.CommandCollection.Length)
					{
						if (!(this.CommandCollection(i)) == null)
						{
							((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
						}
						i = i + 1;
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
			{
				get
				{
					if (this._commandCollection == null)
					{
						this.InitCommandCollection();
					}
					return this._commandCollection;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
			{
				get
				{
					return this._clearBeforeFill;
				}
				set
				{
					this._clearBeforeFill = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
			{
				this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
				global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
				tableMapping.SourceTable = "Table";
				tableMapping.DataSetTable = "SPMaster";
				tableMapping.ColumnMappings.Add("MasterID", "MasterID");
				tableMapping.ColumnMappings.Add("Name", "Name");
				tableMapping.ColumnMappings.Add("Note", "Note");
				tableMapping.ColumnMappings.Add("TypeID", "TypeID");
				this._adapter.TableMappings.Add(tableMapping);
				this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.DeleteCommand.Connection = this.Connection;
				this._adapter.DeleteCommand.CommandText = "dbo.SPMasterDelete";
				this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MasterID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "MasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.InsertCommand.Connection = this.Connection;
				this._adapter.InsertCommand.CommandText = "dbo.SPMasterInsert";
				this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.NVarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, "TypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.UpdateCommand.Connection = this.Connection;
				this._adapter.UpdateCommand.CommandText = "dbo.SPMasterUpdate";
				this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MasterID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "MasterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
			{
				this._connection = new global::System.Data.SqlClient.SqlConnection();
				this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
			{
				this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
				this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
				this._commandCollection[0].Connection = this.Connection;
				this._commandCollection[0].CommandText = "dbo.SPMasterSelectAll";
				this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
				this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.NVarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
				this._commandCollection[1].Connection = this.Connection;
				this._commandCollection[1].CommandText = "dbo.SPMasterSelectEmpty";
				this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
				this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.NVarChar, 6, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
				this._commandCollection[2].Connection = this.Connection;
				this._commandCollection[2].CommandText = "dbo.SPMasterSelect";
				this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
				this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MasterID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillMasterLookup(SPDataProxy.SPMasterDataTable dataTable, string TypeID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(0);
				if (TypeID == null)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(TypeID);
				}
				if (this.ClearBeforeFill == true)
				{
					dataTable.Clear();
				}
				int returnValue = this.Adapter.Fill(dataTable);
				return returnValue;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPMasterDataTable GetMasterLookup(string TypeID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(0);
				if (TypeID == null)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(TypeID);
				}
				SPDataProxy.SPMasterDataTable dataTable = new SPDataProxy.SPMasterDataTable();
				this.Adapter.Fill(dataTable);
				return dataTable;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillEmptyMaster(SPDataProxy.SPMasterDataTable dataTable, string TypeID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(1);
				if (TypeID == null)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(TypeID);
				}
				if (this.ClearBeforeFill == true)
				{
					dataTable.Clear();
				}
				int returnValue = this.Adapter.Fill(dataTable);
				return returnValue;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPMasterDataTable GetEmptyMaster(string TypeID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(1);
				if (TypeID == null)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(TypeID);
				}
				SPDataProxy.SPMasterDataTable dataTable = new SPDataProxy.SPMasterDataTable();
				this.Adapter.Fill(dataTable);
				return dataTable;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillMaster(SPDataProxy.SPMasterDataTable dataTable, global::System.Nullable<long> MasterID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(2);
				if (MasterID.HasValue == true)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = (long) MasterID.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				if (this.ClearBeforeFill == true)
				{
					dataTable.Clear();
				}
				int returnValue = this.Adapter.Fill(dataTable);
				return returnValue;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPMasterDataTable GetMaster(global::System.Nullable<long> MasterID)
			{
				this.Adapter.SelectCommand = this.CommandCollection(2);
				if (MasterID.HasValue == true)
				{
					this.Adapter.SelectCommand.Parameters[1].Value = (long) MasterID.Value;
				}
				else
				{
					this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
				}
				SPDataProxy.SPMasterDataTable dataTable = new SPDataProxy.SPMasterDataTable();
				this.Adapter.Fill(dataTable);
				return dataTable;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy.SPMasterDataTable dataTable)
			{
				return this.Adapter.Update(dataTable);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy dataSet)
			{
				return this.Adapter.Update(dataSet, "SPMaster");
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
			{
				return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
			}
			
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
				{
					return this.Adapter.Update(dataRows);
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(global::System.Nullable<long> MasterID)
				{
					if (MasterID.HasValue == true)
					{
						this.Adapter.DeleteCommand.Parameters[1].Value = (long) MasterID.Value;
					}
					else
					{
						this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
					if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.DeleteCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.DeleteCommand.Connection.Close();
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string Name, string Note, string TypeID)
				{
					if (Name == null)
					{
						this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Name);
					}
					if (Note == null)
					{
						this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(Note);
					}
					if (TypeID == null)
					{
						this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToString(TypeID);
					}
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
					if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.InsertCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.InsertCommand.Connection.Close();
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(global::System.Nullable<long> MasterID, string Name, string Note)
				{
					if (MasterID.HasValue == true)
					{
						this.Adapter.UpdateCommand.Parameters[1].Value = (long) MasterID.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					if (Name == null)
					{
						this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(Name);
					}
					if (Note == null)
					{
						this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(Note);
					}
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
					if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.UpdateCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.UpdateCommand.Connection.Close();
						}
					}
				}
			}
			
			///<summary>
			///Represents the connection and commands used to retrieve and save data.
			///</summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPNotes : global::System.ComponentModel.Component
			{
				
				
				private global::System.Data.SqlClient.SqlDataAdapter _adapter;
				
				private global::System.Data.SqlClient.SqlConnection _connection;
				
				private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
				
				private bool _clearBeforeFill;
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPNotes()
				{
					this.ClearBeforeFill = true;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
				{
					get
					{
						if (this._adapter == null)
						{
							this.InitAdapter();
						}
						return this._adapter;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
				{
					get
					{
						if (this._connection == null)
						{
							this.InitConnection();
						}
						return this._connection;
					}
					set
					{
						this._connection = value;
						if (this.Adapter.InsertCommand != null)
						{
							this.Adapter.InsertCommand.Connection = value;
						}
						if (this.Adapter.DeleteCommand != null)
						{
							this.Adapter.DeleteCommand.Connection = value;
						}
						if (this.Adapter.UpdateCommand != null)
						{
							this.Adapter.UpdateCommand.Connection = value;
						}
						int i = 0;
						while (i < this.CommandCollection.Length)
						{
							if (!(this.CommandCollection(i)) == null)
							{
								((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
							}
							i = i + 1;
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
				{
					get
					{
						if (this._commandCollection == null)
						{
							this.InitCommandCollection();
						}
						return this._commandCollection;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
				{
					get
					{
						return this._clearBeforeFill;
					}
					set
					{
						this._clearBeforeFill = value;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
				{
					this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
					global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
					tableMapping.SourceTable = "Table";
					tableMapping.DataSetTable = "SPNotes";
					tableMapping.ColumnMappings.Add("NoteID", "NoteID");
					tableMapping.ColumnMappings.Add("UserID", "UserID");
					tableMapping.ColumnMappings.Add("NoteText", "NoteText");
					tableMapping.ColumnMappings.Add("AlarmDate", "AlarmDate");
					tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
					this._adapter.TableMappings.Add(tableMapping);
					this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.DeleteCommand.Connection = this.Connection;
					this._adapter.DeleteCommand.CommandText = "dbo.SPNotesDelete";
					this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoteID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "NoteID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.InsertCommand.Connection = this.Connection;
					this._adapter.InsertCommand.CommandText = "dbo.SPNotesInsert";
					this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoteText", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "NoteText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, "AlarmDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.UpdateCommand.Connection = this.Connection;
					this._adapter.UpdateCommand.CommandText = "dbo.SPNotesUpdate";
					this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoteID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "NoteID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoteText", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "NoteText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AlarmDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, "AlarmDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
				{
					this._connection = new global::System.Data.SqlClient.SqlConnection();
					this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
				{
					this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
					this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
					this._commandCollection[0].Connection = this.Connection;
					this._commandCollection[0].CommandText = "dbo.SPNotesSelectAll";
					this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
					this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
					this._commandCollection[1].Connection = this.Connection;
					this._commandCollection[1].CommandText = "dbo.SPNotesSelect";
					this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
					this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NoteID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillNotes(SPDataProxy.SPNotesDataTable dataTable)
				{
					this.Adapter.SelectCommand = this.CommandCollection(0);
					if (this.ClearBeforeFill == true)
					{
						dataTable.Clear();
					}
					int returnValue = this.Adapter.Fill(dataTable);
					return returnValue;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPNotesDataTable GetNotes()
				{
					this.Adapter.SelectCommand = this.CommandCollection(0);
					SPDataProxy.SPNotesDataTable dataTable = new SPDataProxy.SPNotesDataTable();
					this.Adapter.Fill(dataTable);
					return dataTable;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillNote(SPDataProxy.SPNotesDataTable dataTable, global::System.Nullable<long> NoteID)
				{
					this.Adapter.SelectCommand = this.CommandCollection(1);
					if (NoteID.HasValue == true)
					{
						this.Adapter.SelectCommand.Parameters[1].Value = (long) NoteID.Value;
					}
					else
					{
						this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					if (this.ClearBeforeFill == true)
					{
						dataTable.Clear();
					}
					int returnValue = this.Adapter.Fill(dataTable);
					return returnValue;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPNotesDataTable GetNote(global::System.Nullable<long> NoteID)
				{
					this.Adapter.SelectCommand = this.CommandCollection(1);
					if (NoteID.HasValue == true)
					{
						this.Adapter.SelectCommand.Parameters[1].Value = (long) NoteID.Value;
					}
					else
					{
						this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					SPDataProxy.SPNotesDataTable dataTable = new SPDataProxy.SPNotesDataTable();
					this.Adapter.Fill(dataTable);
					return dataTable;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy.SPNotesDataTable dataTable)
				{
					return this.Adapter.Update(dataTable);
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy dataSet)
				{
					return this.Adapter.Update(dataSet, "SPNotes");
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
				{
					return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
				}
				
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
					{
						return this.Adapter.Update(dataRows);
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(global::System.Nullable<long> NoteID)
					{
						if (NoteID.HasValue == true)
						{
							this.Adapter.DeleteCommand.Parameters[1].Value = (long) NoteID.Value;
						}
						else
						{
							this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
						if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.DeleteCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.DeleteCommand.Connection.Close();
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string UserID, string NoteText, global::System.Nullable<DateTime> AlarmDate, global::System.Nullable<DateTime> CreateDate)
					{
						if (UserID == null)
						{
							this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(UserID);
						}
						if (NoteText == null)
						{
							this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(NoteText);
						}
						if (AlarmDate.HasValue == true)
						{
							this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToDateTime(AlarmDate.Value);
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
						}
						if (CreateDate.HasValue == true)
						{
							this.Adapter.InsertCommand.Parameters[4].Value = System.Convert.ToDateTime(CreateDate.Value);
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
						}
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
						if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.InsertCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.InsertCommand.Connection.Close();
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(global::System.Nullable<long> NoteID, string UserID, string NoteText, global::System.Nullable<DateTime> AlarmDate, global::System.Nullable<DateTime> CreateDate)
					{
						if (NoteID.HasValue == true)
						{
							this.Adapter.UpdateCommand.Parameters[1].Value = (long) NoteID.Value;
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						if (UserID == null)
						{
							this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(UserID);
						}
						if (NoteText == null)
						{
							this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(NoteText);
						}
						if (AlarmDate.HasValue == true)
						{
							this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToDateTime(AlarmDate.Value);
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
						}
						if (CreateDate.HasValue == true)
						{
							this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToDateTime(CreateDate.Value);
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
						}
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
						if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.UpdateCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.UpdateCommand.Connection.Close();
							}
						}
					}
				}
				
				///<summary>
				///Represents the connection and commands used to retrieve and save data.
				///</summary>
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPAutoId : global::System.ComponentModel.Component
				{
					
					
					private global::System.Data.SqlClient.SqlDataAdapter _adapter;
					
					private global::System.Data.SqlClient.SqlConnection _connection;
					
					private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
					
					private bool _clearBeforeFill;
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPAutoId()
					{
						this.ClearBeforeFill = true;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
					{
						get
						{
							if (this._adapter == null)
							{
								this.InitAdapter();
							}
							return this._adapter;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
					{
						get
						{
							if (this._connection == null)
							{
								this.InitConnection();
							}
							return this._connection;
						}
						set
						{
							this._connection = value;
							if (this.Adapter.InsertCommand != null)
							{
								this.Adapter.InsertCommand.Connection = value;
							}
							if (this.Adapter.DeleteCommand != null)
							{
								this.Adapter.DeleteCommand.Connection = value;
							}
							if (this.Adapter.UpdateCommand != null)
							{
								this.Adapter.UpdateCommand.Connection = value;
							}
							int i = 0;
							while (i < this.CommandCollection.Length)
							{
								if (!(this.CommandCollection(i)) == null)
								{
									((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
								}
								i = i + 1;
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
					{
						get
						{
							if (this._commandCollection == null)
							{
								this.InitCommandCollection();
							}
							return this._commandCollection;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
					{
						get
						{
							return this._clearBeforeFill;
						}
						set
						{
							this._clearBeforeFill = value;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
					{
						this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
						global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
						tableMapping.SourceTable = "Table";
						tableMapping.DataSetTable = "SPAutoId";
						tableMapping.ColumnMappings.Add("NewID", "NewID");
						this._adapter.TableMappings.Add(tableMapping);
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
					{
						this._connection = new global::System.Data.SqlClient.SqlConnection();
						this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
					{
						this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
						this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
						this._commandCollection[0].Connection = this.Connection;
						this._commandCollection[0].CommandText = "dbo.SPAutoId_New";
						this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
						this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Prefix", global::System.Data.SqlDbType.NVarChar, 5, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillAutoID(SPDataProxy.SPAutoIdDataTable dataTable, string Prefix, global::System.Nullable<DateTime> LastDate)
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						if (Prefix == null)
						{
							this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(Prefix);
						}
						if (LastDate.HasValue == true)
						{
							this.Adapter.SelectCommand.Parameters[2].Value = System.Convert.ToDateTime(LastDate.Value);
						}
						else
						{
							this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
						}
						if (this.ClearBeforeFill == true)
						{
							dataTable.Clear();
						}
						int returnValue = this.Adapter.Fill(dataTable);
						return returnValue;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPAutoIdDataTable GetAutoID(string Prefix, global::System.Nullable<DateTime> LastDate)
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						if (Prefix == null)
						{
							this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(Prefix);
						}
						if (LastDate.HasValue == true)
						{
							this.Adapter.SelectCommand.Parameters[2].Value = System.Convert.ToDateTime(LastDate.Value);
						}
						else
						{
							this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
						}
						SPDataProxy.SPAutoIdDataTable dataTable = new SPDataProxy.SPAutoIdDataTable();
						this.Adapter.Fill(dataTable);
						return dataTable;
					}
				}
				
				///<summary>
				///Represents the connection and commands used to retrieve and save data.
				///</summary>
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPCompany : global::System.ComponentModel.Component
				{
					
					
					private global::System.Data.SqlClient.SqlDataAdapter _adapter;
					
					private global::System.Data.SqlClient.SqlConnection _connection;
					
					private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
					
					private bool _clearBeforeFill;
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPCompany()
					{
						this.ClearBeforeFill = true;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
					{
						get
						{
							if (this._adapter == null)
							{
								this.InitAdapter();
							}
							return this._adapter;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
					{
						get
						{
							if (this._connection == null)
							{
								this.InitConnection();
							}
							return this._connection;
						}
						set
						{
							this._connection = value;
							if (this.Adapter.InsertCommand != null)
							{
								this.Adapter.InsertCommand.Connection = value;
							}
							if (this.Adapter.DeleteCommand != null)
							{
								this.Adapter.DeleteCommand.Connection = value;
							}
							if (this.Adapter.UpdateCommand != null)
							{
								this.Adapter.UpdateCommand.Connection = value;
							}
							int i = 0;
							while (i < this.CommandCollection.Length)
							{
								if (!(this.CommandCollection(i)) == null)
								{
									((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
								}
								i = i + 1;
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
					{
						get
						{
							if (this._commandCollection == null)
							{
								this.InitCommandCollection();
							}
							return this._commandCollection;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
					{
						get
						{
							return this._clearBeforeFill;
						}
						set
						{
							this._clearBeforeFill = value;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
					{
						this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
						global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
						tableMapping.SourceTable = "Table";
						tableMapping.DataSetTable = "SPCompany";
						tableMapping.ColumnMappings.Add("CompanyID", "CompanyID");
						tableMapping.ColumnMappings.Add("Name", "Name");
						tableMapping.ColumnMappings.Add("PhoneList", "PhoneList");
						tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress");
						tableMapping.ColumnMappings.Add("Address1", "Address1");
						tableMapping.ColumnMappings.Add("Address2", "Address2");
						tableMapping.ColumnMappings.Add("Logo", "Logo");
						tableMapping.ColumnMappings.Add("Motto", "Motto");
						tableMapping.ColumnMappings.Add("CustomNote", "CustomNote");
						this._adapter.TableMappings.Add(tableMapping);
						this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.DeleteCommand.Connection = this.Connection;
						this._adapter.DeleteCommand.CommandText = "dbo.SPCompanyDelete";
						this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "CompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.InsertCommand.Connection = this.Connection;
						this._adapter.InsertCommand.CommandText = "dbo.SPCompanyInsert";
						this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneList", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailAddress", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address1", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Address1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address2", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Address2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Logo", global::System.Data.SqlDbType.Image, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Logo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Motto", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Motto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomNote", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "CustomNote", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.UpdateCommand.Connection = this.Connection;
						this._adapter.UpdateCommand.CommandText = "dbo.SPCompanyUpdate";
						this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "CompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneList", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmailAddress", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address1", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Address1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address2", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Address2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Logo", global::System.Data.SqlDbType.Image, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Logo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Motto", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Motto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomNote", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "CustomNote", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
					{
						this._connection = new global::System.Data.SqlClient.SqlConnection();
						this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
					{
						this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
						this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
						this._commandCollection[0].Connection = this.Connection;
						this._commandCollection[0].CommandText = "dbo.SPCompanySelectAll";
						this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
						this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
						this._commandCollection[1].Connection = this.Connection;
						this._commandCollection[1].CommandText = "dbo.SPCompanySelectEmpty";
						this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
						this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillCompanies(SPDataProxy.SPCompanyDataTable dataTable)
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						if (this.ClearBeforeFill == true)
						{
							dataTable.Clear();
						}
						int returnValue = this.Adapter.Fill(dataTable);
						return returnValue;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPCompanyDataTable GetCompanies()
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						SPDataProxy.SPCompanyDataTable dataTable = new SPDataProxy.SPCompanyDataTable();
						this.Adapter.Fill(dataTable);
						return dataTable;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillEmptyCompany(SPDataProxy.SPCompanyDataTable dataTable)
					{
						this.Adapter.SelectCommand = this.CommandCollection(1);
						if (this.ClearBeforeFill == true)
						{
							dataTable.Clear();
						}
						int returnValue = this.Adapter.Fill(dataTable);
						return returnValue;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPCompanyDataTable GetEmptyCompany()
					{
						this.Adapter.SelectCommand = this.CommandCollection(1);
						SPDataProxy.SPCompanyDataTable dataTable = new SPDataProxy.SPCompanyDataTable();
						this.Adapter.Fill(dataTable);
						return dataTable;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy.SPCompanyDataTable dataTable)
					{
						return this.Adapter.Update(dataTable);
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy dataSet)
					{
						return this.Adapter.Update(dataSet, "SPCompany");
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
					{
						return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
					}
					
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
						{
							return this.Adapter.Update(dataRows);
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(global::System.Nullable<long> CompanyID)
						{
							if (CompanyID.HasValue == true)
							{
								this.Adapter.DeleteCommand.Parameters[1].Value = (long) CompanyID.Value;
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
							if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.DeleteCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.DeleteCommand.Connection.Close();
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string Name, string PhoneList, string EmailAddress, string Address1, string Address2, byte[] Logo, string Motto, string CustomNote)
						{
							if (Name == null)
							{
								this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Name);
							}
							if (PhoneList == null)
							{
								this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(PhoneList);
							}
							if (EmailAddress == null)
							{
								this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToString(EmailAddress);
							}
							if (Address1 == null)
							{
								this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[4].Value = System.Convert.ToString(Address1);
							}
							if (Address2 == null)
							{
								this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[5].Value = System.Convert.ToString(Address2);
							}
							if (Logo == null)
							{
								this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[6].Value = (byte[]) Logo;
							}
							if (Motto == null)
							{
								this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[7].Value = System.Convert.ToString(Motto);
							}
							if (CustomNote == null)
							{
								this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[8].Value = System.Convert.ToString(CustomNote);
							}
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
							if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.InsertCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.InsertCommand.Connection.Close();
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(global::System.Nullable<long> CompanyID, string Name, string PhoneList, string EmailAddress, string Address1, string Address2, byte[] Logo, string Motto, string CustomNote)
						{
							if (CompanyID.HasValue == true)
							{
								this.Adapter.UpdateCommand.Parameters[1].Value = (long) CompanyID.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							if (Name == null)
							{
								this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(Name);
							}
							if (PhoneList == null)
							{
								this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(PhoneList);
							}
							if (EmailAddress == null)
							{
								this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToString(EmailAddress);
							}
							if (Address1 == null)
							{
								this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToString(Address1);
							}
							if (Address2 == null)
							{
								this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[6].Value = System.Convert.ToString(Address2);
							}
							if (Logo == null)
							{
								this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[7].Value = (byte[]) Logo;
							}
							if (Motto == null)
							{
								this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[8].Value = System.Convert.ToString(Motto);
							}
							if (CustomNote == null)
							{
								this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[9].Value = System.Convert.ToString(CustomNote);
							}
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
							if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.UpdateCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.UpdateCommand.Connection.Close();
								}
							}
						}
					}
					
					///<summary>
					///Represents the connection and commands used to retrieve and save data.
					///</summary>
					[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPPayMode : global::System.ComponentModel.Component
					{
						
						
						private global::System.Data.SqlClient.SqlDataAdapter _adapter;
						
						private global::System.Data.SqlClient.SqlConnection _connection;
						
						private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
						
						private bool _clearBeforeFill;
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPPayMode()
						{
							this.ClearBeforeFill = true;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
						{
							get
							{
								if (this._adapter == null)
								{
									this.InitAdapter();
								}
								return this._adapter;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
						{
							get
							{
								if (this._connection == null)
								{
									this.InitConnection();
								}
								return this._connection;
							}
							set
							{
								this._connection = value;
								if (this.Adapter.InsertCommand != null)
								{
									this.Adapter.InsertCommand.Connection = value;
								}
								if (this.Adapter.DeleteCommand != null)
								{
									this.Adapter.DeleteCommand.Connection = value;
								}
								if (this.Adapter.UpdateCommand != null)
								{
									this.Adapter.UpdateCommand.Connection = value;
								}
								int i = 0;
								while (i < this.CommandCollection.Length)
								{
									if (!(this.CommandCollection(i)) == null)
									{
										((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
									}
									i = i + 1;
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
						{
							get
							{
								if (this._commandCollection == null)
								{
									this.InitCommandCollection();
								}
								return this._commandCollection;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
						{
							get
							{
								return this._clearBeforeFill;
							}
							set
							{
								this._clearBeforeFill = value;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
						{
							this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
							global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
							tableMapping.SourceTable = "Table";
							tableMapping.DataSetTable = "SPPayMode";
							tableMapping.ColumnMappings.Add("PayModeID", "PayModeID");
							tableMapping.ColumnMappings.Add("Name", "Name");
							tableMapping.ColumnMappings.Add("Category", "Category");
							tableMapping.ColumnMappings.Add("BankID", "BankID");
							tableMapping.ColumnMappings.Add("Note", "Note");
							this._adapter.TableMappings.Add(tableMapping);
							this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.DeleteCommand.Connection = this.Connection;
							this._adapter.DeleteCommand.CommandText = "dbo.SPPayModeDelete";
							this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PayModeID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "PayModeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.InsertCommand.Connection = this.Connection;
							this._adapter.InsertCommand.CommandText = "dbo.SPPayModeInsert";
							this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BankID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "BankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.UpdateCommand.Connection = this.Connection;
							this._adapter.UpdateCommand.CommandText = "dbo.SPPayModeUpdate";
							this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.StoredProcedure;
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PayModeID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "PayModeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BankID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, "BankID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
						{
							this._connection = new global::System.Data.SqlClient.SqlConnection();
							this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
						{
							this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
							this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
							this._commandCollection[0].Connection = this.Connection;
							this._commandCollection[0].CommandText = "dbo.SPPayModeSelectAll";
							this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
							this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
							this._commandCollection[1].Connection = this.Connection;
							this._commandCollection[1].CommandText = "dbo.SPPayModeSelectEmpty";
							this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
							this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
							this._commandCollection[2].Connection = this.Connection;
							this._commandCollection[2].CommandText = "dbo.SPPayModeSelect";
							this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
							this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PayModeID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillPayModes(SPDataProxy.SPPayModeDataTable dataTable)
						{
							this.Adapter.SelectCommand = this.CommandCollection(0);
							if (this.ClearBeforeFill == true)
							{
								dataTable.Clear();
							}
							int returnValue = this.Adapter.Fill(dataTable);
							return returnValue;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPPayModeDataTable GetPayModes()
						{
							this.Adapter.SelectCommand = this.CommandCollection(0);
							SPDataProxy.SPPayModeDataTable dataTable = new SPDataProxy.SPPayModeDataTable();
							this.Adapter.Fill(dataTable);
							return dataTable;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillEmptyPayMode(SPDataProxy.SPPayModeDataTable dataTable)
						{
							this.Adapter.SelectCommand = this.CommandCollection(1);
							if (this.ClearBeforeFill == true)
							{
								dataTable.Clear();
							}
							int returnValue = this.Adapter.Fill(dataTable);
							return returnValue;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPPayModeDataTable GetEmptyPayMode()
						{
							this.Adapter.SelectCommand = this.CommandCollection(1);
							SPDataProxy.SPPayModeDataTable dataTable = new SPDataProxy.SPPayModeDataTable();
							this.Adapter.Fill(dataTable);
							return dataTable;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]public virtual int FillPayMode(SPDataProxy.SPPayModeDataTable dataTable, global::System.Nullable<long> PayModeID)
						{
							this.Adapter.SelectCommand = this.CommandCollection(2);
							if (PayModeID.HasValue == true)
							{
								this.Adapter.SelectCommand.Parameters[1].Value = (long) PayModeID.Value;
							}
							else
							{
								this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							if (this.ClearBeforeFill == true)
							{
								dataTable.Clear();
							}
							int returnValue = this.Adapter.Fill(dataTable);
							return returnValue;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]public virtual SPDataProxy.SPPayModeDataTable GetPayMode(global::System.Nullable<long> PayModeID)
						{
							this.Adapter.SelectCommand = this.CommandCollection(2);
							if (PayModeID.HasValue == true)
							{
								this.Adapter.SelectCommand.Parameters[1].Value = (long) PayModeID.Value;
							}
							else
							{
								this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							SPDataProxy.SPPayModeDataTable dataTable = new SPDataProxy.SPPayModeDataTable();
							this.Adapter.Fill(dataTable);
							return dataTable;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy.SPPayModeDataTable dataTable)
						{
							return this.Adapter.Update(dataTable);
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(SPDataProxy dataSet)
						{
							return this.Adapter.Update(dataSet, "SPPayMode");
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
						{
							return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
						}
						
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
							{
								return this.Adapter.Update(dataRows);
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(global::System.Nullable<long> PayModeID)
							{
								if (PayModeID.HasValue == true)
								{
									this.Adapter.DeleteCommand.Parameters[1].Value = (long) PayModeID.Value;
								}
								else
								{
									this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
								}
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
								if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.DeleteCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.DeleteCommand.Connection.Close();
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string Name, string Category, global::System.Nullable<long> BankID, string Note)
							{
								if (Name == null)
								{
									this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Name);
								}
								if (Category == null)
								{
									this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(Category);
								}
								if (BankID.HasValue == true)
								{
									this.Adapter.InsertCommand.Parameters[3].Value = (long) BankID.Value;
								}
								else
								{
									this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								if (Note == null)
								{
									this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.InsertCommand.Parameters[4].Value = System.Convert.ToString(Note);
								}
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
								if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.InsertCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.InsertCommand.Connection.Close();
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(global::System.Nullable<long> PayModeID, string Name, string Category, global::System.Nullable<long> BankID, string Note)
							{
								if (PayModeID.HasValue == true)
								{
									this.Adapter.UpdateCommand.Parameters[1].Value = (long) PayModeID.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
								}
								if (Name == null)
								{
									this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(Name);
								}
								if (Category == null)
								{
									this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(Category);
								}
								if (BankID.HasValue == true)
								{
									this.Adapter.UpdateCommand.Parameters[4].Value = (long) BankID.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
								}
								if (Note == null)
								{
									this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToString(Note);
								}
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
								if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.UpdateCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.UpdateCommand.Connection.Close();
									}
								}
							}
						}
						
						///<summary>
						///Represents the connection and commands used to retrieve and save data.
						///</summary>
						[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class taSPLookup : global::System.ComponentModel.Component
						{
							
							
							private global::System.Data.SqlClient.SqlDataAdapter _adapter;
							
							private global::System.Data.SqlClient.SqlConnection _connection;
							
							private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
							
							private bool _clearBeforeFill;
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public taSPLookup()
							{
								this.ClearBeforeFill = true;
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
							{
								get
								{
									if (this._adapter == null)
									{
										this.InitAdapter();
									}
									return this._adapter;
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
							{
								get
								{
									if (this._connection == null)
									{
										this.InitConnection();
									}
									return this._connection;
								}
								set
								{
									this._connection = value;
									if (this.Adapter.InsertCommand != null)
									{
										this.Adapter.InsertCommand.Connection = value;
									}
									if (this.Adapter.DeleteCommand != null)
									{
										this.Adapter.DeleteCommand.Connection = value;
									}
									if (this.Adapter.UpdateCommand != null)
									{
										this.Adapter.UpdateCommand.Connection = value;
									}
									int i = 0;
									while (i < this.CommandCollection.Length)
									{
										if (!(this.CommandCollection(i)) == null)
										{
											((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
										}
										i = i + 1;
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
							{
								get
								{
									if (this._commandCollection == null)
									{
										this.InitCommandCollection();
									}
									return this._commandCollection;
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
							{
								get
								{
									return this._clearBeforeFill;
								}
								set
								{
									this._clearBeforeFill = value;
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
							{
								this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
								global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
								tableMapping.SourceTable = "Table";
								tableMapping.DataSetTable = "SPLookup";
								tableMapping.ColumnMappings.Add("ID", "ID");
								tableMapping.ColumnMappings.Add("Name", "Name");
								this._adapter.TableMappings.Add(tableMapping);
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
							{
								this._connection = new global::System.Data.SqlClient.SqlConnection();
								this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
							{
								this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
								this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
								this._commandCollection[0].Connection = this.Connection;
								this._commandCollection[0].CommandText = "dbo.SPLookup_Search";
								this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
								this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
								this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SearchType", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
								this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubType", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
								this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SearchFor", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
								this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SearchItem", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int FillSearchResults(SPDataProxy.SPLookupDataTable dataTable, string SearchType, string SubType, string SearchFor, string SearchItem)
							{
								this.Adapter.SelectCommand = this.CommandCollection(0);
								if (SearchType == null)
								{
									this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(SearchType);
								}
								if (SubType == null)
								{
									this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[2].Value = System.Convert.ToString(SubType);
								}
								if (SearchFor == null)
								{
									this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[3].Value = System.Convert.ToString(SearchFor);
								}
								if (SearchItem == null)
								{
									this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[4].Value = System.Convert.ToString(SearchItem);
								}
								if (this.ClearBeforeFill == true)
								{
									dataTable.Clear();
								}
								int returnValue = this.Adapter.Fill(dataTable);
								return returnValue;
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual SPDataProxy.SPLookupDataTable GetSearchResults(string SearchType, string SubType, string SearchFor, string SearchItem)
							{
								this.Adapter.SelectCommand = this.CommandCollection(0);
								if (SearchType == null)
								{
									this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[1].Value = System.Convert.ToString(SearchType);
								}
								if (SubType == null)
								{
									this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[2].Value = System.Convert.ToString(SubType);
								}
								if (SearchFor == null)
								{
									this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[3].Value = System.Convert.ToString(SearchFor);
								}
								if (SearchItem == null)
								{
									this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.SelectCommand.Parameters[4].Value = System.Convert.ToString(SearchItem);
								}
								SPDataProxy.SPLookupDataTable dataTable = new SPDataProxy.SPLookupDataTable();
								this.Adapter.Fill(dataTable);
								return dataTable;
							}
						}
					}
					
				}
