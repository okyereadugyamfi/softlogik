using System.Text.RegularExpressions;
using System.Diagnostics;
using System;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Collections;
using System.Drawing;
using Microsoft.VisualBasic;
using System.Data.SqlClient;
using System.Data;
using System.Collections.Generic;
using WeifenLuo.WinFormsUI;
using Microsoft.Win32;
using WeifenLuo;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




///<summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
namespace SoftLogik.Win
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), global::System.Xml.Serialization.XmlRootAttribute("dsUserSecurity"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]public partial class dsUserSecurity : global::System.Data.DataSet
	{
		
		
		private SPApplicationDataTable tableSPApplication;
		
		private SPRoleDataTable tableSPRole;
		
		private SPUserDataTable tableSPUser;
		
		private SPUserRoleDataTable tableSPUserRole;
		
		private global::System.Data.DataRelation relationFK_SPUserRole;
		
		private global::System.Data.DataRelation relationSPRoleUserRole_Fk;
		
		private global::System.Data.DataRelation relationSPApplicationUserRole_FK;
		
		private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public dsUserSecurity()
		{
			this.BeginInit();
			this.InitClass();
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			base.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected dsUserSecurity(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
		{
			if (this.IsBinarySerialized(info, context) == true)
			{
				this.InitVars(false);
				global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
				this.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler1);
				return;
			}
			string strSchema = System.Convert.ToString(info.GetValue("XmlSchema", typeof(string)));
			if (this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
				if (!(ds.Tables["SPApplication"]) == null)
				{
					base.Tables.Add(new SPApplicationDataTable(ds.Tables["SPApplication"]));
				}
				if (!(ds.Tables["SPRole"]) == null)
				{
					base.Tables.Add(new SPRoleDataTable(ds.Tables["SPRole"]));
				}
				if (!(ds.Tables["SPUser"]) == null)
				{
					base.Tables.Add(new SPUserDataTable(ds.Tables["SPUser"]));
				}
				if (!(ds.Tables["SPUserRole"]) == null)
				{
					base.Tables.Add(new SPUserRoleDataTable(ds.Tables["SPUserRole"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			}
			this.GetSerializationData(info, context);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			base.Tables.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
			this.Relations.CollectionChanged += new System.ComponentModel.CollectionChangeEventHandler(schemaChangedHandler);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPApplicationDataTable SPApplication
		{
			get
			{
				return this.tableSPApplication;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPRoleDataTable SPRole
		{
			get
			{
				return this.tableSPRole;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPUserDataTable SPUser
		{
			get
			{
				return this.tableSPUser;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false), global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]public SPUserRoleDataTable SPUserRole
		{
			get
			{
				return this.tableSPUserRole;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.BrowsableAttribute(true), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
		{
			get
			{
				return this._schemaSerializationMode;
			}
			set
			{
				this._schemaSerializationMode = value;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataTableCollection Tables
		{
			get
			{
				return base.Tables;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]public new global::System.Data.DataRelationCollection Relations
		{
			get
			{
				return base.Relations;
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void InitializeDerivedDataSet()
		{
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataSet Clone()
		{
			dsUserSecurity cln = (dsUserSecurity) (base.Clone());
			cln.InitVars();
			cln.SchemaSerializationMode = this.SchemaSerializationMode;
			return cln;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeTables()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override bool ShouldSerializeRelations()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
		{
			if (this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)
			{
				this.Reset();
				global::System.Data.DataSet ds = new global::System.Data.DataSet();
				ds.ReadXml(reader);
				if (!(ds.Tables["SPApplication"]) == null)
				{
					base.Tables.Add(new SPApplicationDataTable(ds.Tables["SPApplication"]));
				}
				if (!(ds.Tables["SPRole"]) == null)
				{
					base.Tables.Add(new SPRoleDataTable(ds.Tables["SPRole"]));
				}
				if (!(ds.Tables["SPUser"]) == null)
				{
					base.Tables.Add(new SPUserDataTable(ds.Tables["SPUser"]));
				}
				if (!(ds.Tables["SPUserRole"]) == null)
				{
					base.Tables.Add(new SPUserRoleDataTable(ds.Tables["SPUserRole"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else
			{
				this.ReadXml(reader);
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
		{
			global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
			this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
			stream.Position = 0;
			return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
		{
			this.InitVars(true);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars(bool initTable)
		{
			this.tableSPApplication = (SPApplicationDataTable) (base.Tables["SPApplication"]);
			if (initTable == true)
			{
				if (this.tableSPApplication != null)
				{
					this.tableSPApplication.InitVars();
				}
			}
			this.tableSPRole = (SPRoleDataTable) (base.Tables["SPRole"]);
			if (initTable == true)
			{
				if (this.tableSPRole != null)
				{
					this.tableSPRole.InitVars();
				}
			}
			this.tableSPUser = (SPUserDataTable) (base.Tables["SPUser"]);
			if (initTable == true)
			{
				if (this.tableSPUser != null)
				{
					this.tableSPUser.InitVars();
				}
			}
			this.tableSPUserRole = (SPUserRoleDataTable) (base.Tables["SPUserRole"]);
			if (initTable == true)
			{
				if (this.tableSPUserRole != null)
				{
					this.tableSPUserRole.InitVars();
				}
			}
			this.relationFK_SPUserRole = this.Relations["FK_SPUserRole"];
			this.relationSPRoleUserRole_Fk = this.Relations["SPRoleUserRole_Fk"];
			this.relationSPApplicationUserRole_FK = this.Relations["SPApplicationUserRole_FK"];
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
		{
			this.DataSetName = "dsUserSecurity";
			this.Prefix = "";
			this.Namespace = "http://tempuri.org/dsUserSecurity.xsd";
			this.EnforceConstraints = true;
			this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
			this.tableSPApplication = new SPApplicationDataTable();
			base.Tables.Add(this.tableSPApplication);
			this.tableSPRole = new SPRoleDataTable();
			base.Tables.Add(this.tableSPRole);
			this.tableSPUser = new SPUserDataTable();
			base.Tables.Add(this.tableSPUser);
			this.tableSPUserRole = new SPUserRoleDataTable();
			base.Tables.Add(this.tableSPUserRole);
			this.relationFK_SPUserRole = new global::System.Data.DataRelation("FK_SPUserRole", new global::System.Data.DataColumn[] {this.tableSPUser.UserIDColumn}, new global::System.Data.DataColumn[] {this.tableSPUserRole.UserIDColumn}, false);
			this.Relations.Add(this.relationFK_SPUserRole);
			this.relationSPRoleUserRole_Fk = new global::System.Data.DataRelation("SPRoleUserRole_Fk", new global::System.Data.DataColumn[] {this.tableSPRole.RoleIDColumn}, new global::System.Data.DataColumn[] {this.tableSPUserRole.RoleIDColumn}, false);
			this.Relations.Add(this.relationSPRoleUserRole_Fk);
			this.relationSPApplicationUserRole_FK = new global::System.Data.DataRelation("SPApplicationUserRole_FK", new global::System.Data.DataColumn[] {this.tableSPApplication.ApplicationIDColumn}, new global::System.Data.DataColumn[] {this.tableSPUserRole.ApplicationIDColumn}, false);
			this.Relations.Add(this.relationSPApplicationUserRole_FK);
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPApplication()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPRole()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPUser()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private bool ShouldSerializeSPUserRole()
		{
			return false;
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
		{
			if (e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)
			{
				this.InitVars();
			}
		}
		
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			dsUserSecurity ds = new dsUserSecurity();
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
			any.Namespace = ds.Namespace;
			sequence.Items.Add(any);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
			if (xs.Contains(dsSchema.TargetNamespace))
			{
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try
				{
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext())
					{
						schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if (s1.Length == s2.Length)
						{
							s1.Position = 0;
							s2.Position = 0;
							
							while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
							{
								
								
							}
							if (s1.Position == s1.Length)
							{
								return type;
							}
						}
						
					}
				}
				finally
				{
					if (s1 != null)
					{
						s1.Close();
					}
					if (s2 != null)
					{
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
		
		public delegate void SPApplicationRowChangeEventHandler(object sender, SPApplicationRowChangeEvent e);
		
		public delegate void SPRoleRowChangeEventHandler(object sender, SPRoleRowChangeEvent e);
		
		public delegate void SPUserRowChangeEventHandler(object sender, SPUserRowChangeEvent e);
		
		public delegate void SPUserRoleRowChangeEventHandler(object sender, SPUserRoleRowChangeEvent e);
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPApplicationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnApplicationID;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnNote;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationDataTable()
			{
				this.TableName = "SPApplication";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPApplicationDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPApplicationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn ApplicationIDColumn
			{
				get
				{
					return this.columnApplicationID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteColumn
			{
				get
				{
					return this.columnNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow this[int index]
			{
				get
				{
					return ((SPApplicationRow) (this.Rows[index]));
				}
			}
			
			private SPApplicationRowChangeEventHandler SPApplicationRowChangingEvent;
			public event SPApplicationRowChangeEventHandler SPApplicationRowChanging
			{
				add
				{
					SPApplicationRowChangingEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Combine(SPApplicationRowChangingEvent, value);
				}
				remove
				{
					SPApplicationRowChangingEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Remove(SPApplicationRowChangingEvent, value);
				}
			}
			
			
			private SPApplicationRowChangeEventHandler SPApplicationRowChangedEvent;
			public event SPApplicationRowChangeEventHandler SPApplicationRowChanged
			{
				add
				{
					SPApplicationRowChangedEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Combine(SPApplicationRowChangedEvent, value);
				}
				remove
				{
					SPApplicationRowChangedEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Remove(SPApplicationRowChangedEvent, value);
				}
			}
			
			
			private SPApplicationRowChangeEventHandler SPApplicationRowDeletingEvent;
			public event SPApplicationRowChangeEventHandler SPApplicationRowDeleting
			{
				add
				{
					SPApplicationRowDeletingEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Combine(SPApplicationRowDeletingEvent, value);
				}
				remove
				{
					SPApplicationRowDeletingEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Remove(SPApplicationRowDeletingEvent, value);
				}
			}
			
			
			private SPApplicationRowChangeEventHandler SPApplicationRowDeletedEvent;
			public event SPApplicationRowChangeEventHandler SPApplicationRowDeleted
			{
				add
				{
					SPApplicationRowDeletedEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Combine(SPApplicationRowDeletedEvent, value);
				}
				remove
				{
					SPApplicationRowDeletedEvent = (SPApplicationRowChangeEventHandler) System.Delegate.Remove(SPApplicationRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPApplicationRow(SPApplicationRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow AddSPApplicationRow(string Name, string Note)
			{
				SPApplicationRow rowSPApplicationRow = (SPApplicationRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, Name, Note};
				rowSPApplicationRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPApplicationRow);
				return rowSPApplicationRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow FindByApplicationID(int ApplicationID)
			{
				return ((SPApplicationRow) (this.Rows.Find(new object[] {ApplicationID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPApplicationDataTable cln = (SPApplicationDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPApplicationDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnApplicationID = base.Columns["ApplicationID"];
				this.columnName = base.Columns["Name"];
				this.columnNote = base.Columns["Note"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnApplicationID = new global::System.Data.DataColumn("ApplicationID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnApplicationID);
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnName);
				this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNote);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnApplicationID}, true));
				this.columnApplicationID.AutoIncrement = true;
				this.columnApplicationID.AllowDBNull = false;
				this.columnApplicationID.ReadOnly = true;
				this.columnApplicationID.Unique = true;
				this.columnName.MaxLength = 50;
				this.columnNote.MaxLength = 50;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow NewSPApplicationRow()
			{
				return ((SPApplicationRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPApplicationRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPApplicationRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPApplicationRowChangedEvent != null)
				{
					if (SPApplicationRowChangedEvent != null)
						SPApplicationRowChangedEvent(this, new SPApplicationRowChangeEvent(((SPApplicationRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPApplicationRowChangingEvent != null)
				{
					if (SPApplicationRowChangingEvent != null)
						SPApplicationRowChangingEvent(this, new SPApplicationRowChangeEvent(((SPApplicationRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPApplicationRowDeletedEvent != null)
				{
					if (SPApplicationRowDeletedEvent != null)
						SPApplicationRowDeletedEvent(this, new SPApplicationRowChangeEvent(((SPApplicationRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPApplicationRowDeletingEvent != null)
				{
					if (SPApplicationRowDeletingEvent != null)
						SPApplicationRowDeletingEvent(this, new SPApplicationRowChangeEvent(((SPApplicationRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPApplicationRow(SPApplicationRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				dsUserSecurity ds = new dsUserSecurity();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPApplicationDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPRoleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnRoleID;
			
			private global::System.Data.DataColumn columnRoleName;
			
			private global::System.Data.DataColumn columnNote;
			
			private global::System.Data.DataColumn columnCreateDate;
			
			private global::System.Data.DataColumn columnModifiedDate;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleDataTable()
			{
				this.TableName = "SPRole";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPRoleDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPRoleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn RoleIDColumn
			{
				get
				{
					return this.columnRoleID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn RoleNameColumn
			{
				get
				{
					return this.columnRoleName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteColumn
			{
				get
				{
					return this.columnNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CreateDateColumn
			{
				get
				{
					return this.columnCreateDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn ModifiedDateColumn
			{
				get
				{
					return this.columnModifiedDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow this[int index]
			{
				get
				{
					return ((SPRoleRow) (this.Rows[index]));
				}
			}
			
			private SPRoleRowChangeEventHandler SPRoleRowChangingEvent;
			public event SPRoleRowChangeEventHandler SPRoleRowChanging
			{
				add
				{
					SPRoleRowChangingEvent = (SPRoleRowChangeEventHandler) System.Delegate.Combine(SPRoleRowChangingEvent, value);
				}
				remove
				{
					SPRoleRowChangingEvent = (SPRoleRowChangeEventHandler) System.Delegate.Remove(SPRoleRowChangingEvent, value);
				}
			}
			
			
			private SPRoleRowChangeEventHandler SPRoleRowChangedEvent;
			public event SPRoleRowChangeEventHandler SPRoleRowChanged
			{
				add
				{
					SPRoleRowChangedEvent = (SPRoleRowChangeEventHandler) System.Delegate.Combine(SPRoleRowChangedEvent, value);
				}
				remove
				{
					SPRoleRowChangedEvent = (SPRoleRowChangeEventHandler) System.Delegate.Remove(SPRoleRowChangedEvent, value);
				}
			}
			
			
			private SPRoleRowChangeEventHandler SPRoleRowDeletingEvent;
			public event SPRoleRowChangeEventHandler SPRoleRowDeleting
			{
				add
				{
					SPRoleRowDeletingEvent = (SPRoleRowChangeEventHandler) System.Delegate.Combine(SPRoleRowDeletingEvent, value);
				}
				remove
				{
					SPRoleRowDeletingEvent = (SPRoleRowChangeEventHandler) System.Delegate.Remove(SPRoleRowDeletingEvent, value);
				}
			}
			
			
			private SPRoleRowChangeEventHandler SPRoleRowDeletedEvent;
			public event SPRoleRowChangeEventHandler SPRoleRowDeleted
			{
				add
				{
					SPRoleRowDeletedEvent = (SPRoleRowChangeEventHandler) System.Delegate.Combine(SPRoleRowDeletedEvent, value);
				}
				remove
				{
					SPRoleRowDeletedEvent = (SPRoleRowChangeEventHandler) System.Delegate.Remove(SPRoleRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPRoleRow(SPRoleRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow AddSPRoleRow(string RoleName, string Note, DateTime CreateDate, DateTime ModifiedDate)
			{
				SPRoleRow rowSPRoleRow = (SPRoleRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, RoleName, Note, CreateDate, ModifiedDate};
				rowSPRoleRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPRoleRow);
				return rowSPRoleRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow FindByRoleID(int RoleID)
			{
				return ((SPRoleRow) (this.Rows.Find(new object[] {RoleID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPRoleDataTable cln = (SPRoleDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPRoleDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnRoleID = base.Columns["RoleID"];
				this.columnRoleName = base.Columns["RoleName"];
				this.columnNote = base.Columns["Note"];
				this.columnCreateDate = base.Columns["CreateDate"];
				this.columnModifiedDate = base.Columns["ModifiedDate"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnRoleID = new global::System.Data.DataColumn("RoleID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnRoleID);
				this.columnRoleName = new global::System.Data.DataColumn("RoleName", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnRoleName);
				this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNote);
				this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCreateDate);
				this.columnModifiedDate = new global::System.Data.DataColumn("ModifiedDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnModifiedDate);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnRoleID}, true));
				this.columnRoleID.AutoIncrement = true;
				this.columnRoleID.AllowDBNull = false;
				this.columnRoleID.ReadOnly = true;
				this.columnRoleID.Unique = true;
				this.columnRoleName.AllowDBNull = false;
				this.columnRoleName.MaxLength = 50;
				this.columnNote.MaxLength = 500;
				this.columnCreateDate.AllowDBNull = false;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow NewSPRoleRow()
			{
				return ((SPRoleRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPRoleRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPRoleRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPRoleRowChangedEvent != null)
				{
					if (SPRoleRowChangedEvent != null)
						SPRoleRowChangedEvent(this, new SPRoleRowChangeEvent(((SPRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPRoleRowChangingEvent != null)
				{
					if (SPRoleRowChangingEvent != null)
						SPRoleRowChangingEvent(this, new SPRoleRowChangeEvent(((SPRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPRoleRowDeletedEvent != null)
				{
					if (SPRoleRowDeletedEvent != null)
						SPRoleRowDeletedEvent(this, new SPRoleRowChangeEvent(((SPRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPRoleRowDeletingEvent != null)
				{
					if (SPRoleRowDeletingEvent != null)
						SPRoleRowDeletingEvent(this, new SPRoleRowChangeEvent(((SPRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPRoleRow(SPRoleRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				dsUserSecurity ds = new dsUserSecurity();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPRoleDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPUserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnUserID;
			
			private global::System.Data.DataColumn columnUserName;
			
			private global::System.Data.DataColumn columnFirstName;
			
			private global::System.Data.DataColumn columnLastName;
			
			private global::System.Data.DataColumn columnNote;
			
			private global::System.Data.DataColumn columnCreateDate;
			
			private global::System.Data.DataColumn columnModifiedDate;
			
			private global::System.Data.DataColumn columnEmployeeID;
			
			private global::System.Data.DataColumn columnIsAdmin;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserDataTable()
			{
				this.TableName = "SPUser";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPUserDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPUserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn UserIDColumn
			{
				get
				{
					return this.columnUserID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn UserNameColumn
			{
				get
				{
					return this.columnUserName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn FirstNameColumn
			{
				get
				{
					return this.columnFirstName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn LastNameColumn
			{
				get
				{
					return this.columnLastName;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn NoteColumn
			{
				get
				{
					return this.columnNote;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn CreateDateColumn
			{
				get
				{
					return this.columnCreateDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn ModifiedDateColumn
			{
				get
				{
					return this.columnModifiedDate;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn EmployeeIDColumn
			{
				get
				{
					return this.columnEmployeeID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn IsAdminColumn
			{
				get
				{
					return this.columnIsAdmin;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow this[int index]
			{
				get
				{
					return ((SPUserRow) (this.Rows[index]));
				}
			}
			
			private SPUserRowChangeEventHandler SPUserRowChangingEvent;
			public event SPUserRowChangeEventHandler SPUserRowChanging
			{
				add
				{
					SPUserRowChangingEvent = (SPUserRowChangeEventHandler) System.Delegate.Combine(SPUserRowChangingEvent, value);
				}
				remove
				{
					SPUserRowChangingEvent = (SPUserRowChangeEventHandler) System.Delegate.Remove(SPUserRowChangingEvent, value);
				}
			}
			
			
			private SPUserRowChangeEventHandler SPUserRowChangedEvent;
			public event SPUserRowChangeEventHandler SPUserRowChanged
			{
				add
				{
					SPUserRowChangedEvent = (SPUserRowChangeEventHandler) System.Delegate.Combine(SPUserRowChangedEvent, value);
				}
				remove
				{
					SPUserRowChangedEvent = (SPUserRowChangeEventHandler) System.Delegate.Remove(SPUserRowChangedEvent, value);
				}
			}
			
			
			private SPUserRowChangeEventHandler SPUserRowDeletingEvent;
			public event SPUserRowChangeEventHandler SPUserRowDeleting
			{
				add
				{
					SPUserRowDeletingEvent = (SPUserRowChangeEventHandler) System.Delegate.Combine(SPUserRowDeletingEvent, value);
				}
				remove
				{
					SPUserRowDeletingEvent = (SPUserRowChangeEventHandler) System.Delegate.Remove(SPUserRowDeletingEvent, value);
				}
			}
			
			
			private SPUserRowChangeEventHandler SPUserRowDeletedEvent;
			public event SPUserRowChangeEventHandler SPUserRowDeleted
			{
				add
				{
					SPUserRowDeletedEvent = (SPUserRowChangeEventHandler) System.Delegate.Combine(SPUserRowDeletedEvent, value);
				}
				remove
				{
					SPUserRowDeletedEvent = (SPUserRowChangeEventHandler) System.Delegate.Remove(SPUserRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPUserRow(SPUserRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow AddSPUserRow(string UserName, string FirstName, string LastName, string Note, DateTime CreateDate, DateTime ModifiedDate, int EmployeeID, bool IsAdmin)
			{
				SPUserRow rowSPUserRow = (SPUserRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, UserName, FirstName, LastName, Note, CreateDate, ModifiedDate, EmployeeID, IsAdmin};
				rowSPUserRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPUserRow);
				return rowSPUserRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow FindByUserID(int UserID)
			{
				return ((SPUserRow) (this.Rows.Find(new object[] {UserID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPUserDataTable cln = (SPUserDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPUserDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnUserID = base.Columns["UserID"];
				this.columnUserName = base.Columns["UserName"];
				this.columnFirstName = base.Columns["FirstName"];
				this.columnLastName = base.Columns["LastName"];
				this.columnNote = base.Columns["Note"];
				this.columnCreateDate = base.Columns["CreateDate"];
				this.columnModifiedDate = base.Columns["ModifiedDate"];
				this.columnEmployeeID = base.Columns["EmployeeID"];
				this.columnIsAdmin = base.Columns["IsAdmin"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserID);
				this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserName);
				this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnFirstName);
				this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLastName);
				this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnNote);
				this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnCreateDate);
				this.columnModifiedDate = new global::System.Data.DataColumn("ModifiedDate", typeof(DateTime), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnModifiedDate);
				this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnEmployeeID);
				this.columnIsAdmin = new global::System.Data.DataColumn("IsAdmin", typeof(bool), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnIsAdmin);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnUserID}, true));
				this.columnUserID.AutoIncrement = true;
				this.columnUserID.AllowDBNull = false;
				this.columnUserID.ReadOnly = true;
				this.columnUserID.Unique = true;
				this.columnUserName.AllowDBNull = false;
				this.columnUserName.MaxLength = 50;
				this.columnFirstName.MaxLength = 50;
				this.columnLastName.MaxLength = 50;
				this.columnNote.MaxLength = 500;
				this.columnCreateDate.AllowDBNull = false;
				this.columnEmployeeID.AllowDBNull = false;
				this.columnIsAdmin.AllowDBNull = false;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow NewSPUserRow()
			{
				return ((SPUserRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPUserRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPUserRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPUserRowChangedEvent != null)
				{
					if (SPUserRowChangedEvent != null)
						SPUserRowChangedEvent(this, new SPUserRowChangeEvent(((SPUserRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPUserRowChangingEvent != null)
				{
					if (SPUserRowChangingEvent != null)
						SPUserRowChangingEvent(this, new SPUserRowChangeEvent(((SPUserRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPUserRowDeletedEvent != null)
				{
					if (SPUserRowDeletedEvent != null)
						SPUserRowDeletedEvent(this, new SPUserRowChangeEvent(((SPUserRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPUserRowDeletingEvent != null)
				{
					if (SPUserRowDeletingEvent != null)
						SPUserRowDeletingEvent(this, new SPUserRowChangeEvent(((SPUserRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPUserRow(SPUserRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				dsUserSecurity ds = new dsUserSecurity();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPUserDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents the strongly named DataTable class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.Serializable(), global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]public partial class SPUserRoleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
		{
			
			
			private global::System.Data.DataColumn columnApplicationID;
			
			private global::System.Data.DataColumn columnRoleID;
			
			private global::System.Data.DataColumn columnUserID;
			
			private global::System.Data.DataColumn columnPolicyData;
			
			private global::System.Data.DataColumn columnLoginState;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleDataTable()
			{
				this.TableName = "SPUserRole";
				this.BeginInit();
				this.InitClass();
				this.EndInit();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPUserRoleDataTable(global::System.Data.DataTable table)
			{
				this.TableName = table.TableName;
				if (table.CaseSensitive != table.DataSet.CaseSensitive)
				{
					this.CaseSensitive = table.CaseSensitive;
				}
				if (table.Locale.ToString() != table.DataSet.Locale.ToString())
				{
					this.Locale = table.Locale;
				}
				if (table.Namespace != table.DataSet.Namespace)
				{
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected SPUserRoleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
			{
				this.InitVars();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn ApplicationIDColumn
			{
				get
				{
					return this.columnApplicationID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn RoleIDColumn
			{
				get
				{
					return this.columnRoleID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn UserIDColumn
			{
				get
				{
					return this.columnUserID;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn PolicyDataColumn
			{
				get
				{
					return this.columnPolicyData;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataColumn LoginStateColumn
			{
				get
				{
					return this.columnLoginState;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Browsable(false)]public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow this[int index]
			{
				get
				{
					return ((SPUserRoleRow) (this.Rows[index]));
				}
			}
			
			private SPUserRoleRowChangeEventHandler SPUserRoleRowChangingEvent;
			public event SPUserRoleRowChangeEventHandler SPUserRoleRowChanging
			{
				add
				{
					SPUserRoleRowChangingEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Combine(SPUserRoleRowChangingEvent, value);
				}
				remove
				{
					SPUserRoleRowChangingEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Remove(SPUserRoleRowChangingEvent, value);
				}
			}
			
			
			private SPUserRoleRowChangeEventHandler SPUserRoleRowChangedEvent;
			public event SPUserRoleRowChangeEventHandler SPUserRoleRowChanged
			{
				add
				{
					SPUserRoleRowChangedEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Combine(SPUserRoleRowChangedEvent, value);
				}
				remove
				{
					SPUserRoleRowChangedEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Remove(SPUserRoleRowChangedEvent, value);
				}
			}
			
			
			private SPUserRoleRowChangeEventHandler SPUserRoleRowDeletingEvent;
			public event SPUserRoleRowChangeEventHandler SPUserRoleRowDeleting
			{
				add
				{
					SPUserRoleRowDeletingEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Combine(SPUserRoleRowDeletingEvent, value);
				}
				remove
				{
					SPUserRoleRowDeletingEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Remove(SPUserRoleRowDeletingEvent, value);
				}
			}
			
			
			private SPUserRoleRowChangeEventHandler SPUserRoleRowDeletedEvent;
			public event SPUserRoleRowChangeEventHandler SPUserRoleRowDeleted
			{
				add
				{
					SPUserRoleRowDeletedEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Combine(SPUserRoleRowDeletedEvent, value);
				}
				remove
				{
					SPUserRoleRowDeletedEvent = (SPUserRoleRowChangeEventHandler) System.Delegate.Remove(SPUserRoleRowDeletedEvent, value);
				}
			}
			
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void AddSPUserRoleRow(SPUserRoleRow row)
			{
				this.Rows.Add(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow AddSPUserRoleRow(SPApplicationRow parentSPApplicationRowBySPApplicationUserRole_FK, SPRoleRow parentSPRoleRowBySPRoleUserRole_Fk, SPUserRow parentSPUserRowByFK_SPUserRole, byte[] PolicyData, int LoginState)
			{
				SPUserRoleRow rowSPUserRoleRow = (SPUserRoleRow) (this.NewRow());
				object[] columnValuesArray = new object[] {null, null, null, PolicyData, LoginState};
				if (parentSPApplicationRowBySPApplicationUserRole_FK != null)
				{
					columnValuesArray[0] = parentSPApplicationRowBySPApplicationUserRole_FK(0);
				}
				if (parentSPRoleRowBySPRoleUserRole_Fk != null)
				{
					columnValuesArray[1] = parentSPRoleRowBySPRoleUserRole_Fk(0);
				}
				if (parentSPUserRowByFK_SPUserRole != null)
				{
					columnValuesArray[2] = parentSPUserRowByFK_SPUserRole(0);
				}
				rowSPUserRoleRow.ItemArray = columnValuesArray;
				this.Rows.Add(rowSPUserRoleRow);
				return rowSPUserRoleRow;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow FindByApplicationIDRoleIDUserID(int ApplicationID, int RoleID, int UserID)
			{
				return ((SPUserRoleRow) (this.Rows.Find(new object[] {ApplicationID, RoleID, UserID})));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public virtual global::System.Collections.IEnumerator GetEnumerator()
			{
				return this.Rows.GetEnumerator();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public override global::System.Data.DataTable Clone()
			{
				SPUserRoleDataTable cln = (SPUserRoleDataTable) (base.Clone());
				cln.InitVars();
				return cln;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataTable CreateInstance()
			{
				return new SPUserRoleDataTable();
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal void InitVars()
			{
				this.columnApplicationID = base.Columns["ApplicationID"];
				this.columnRoleID = base.Columns["RoleID"];
				this.columnUserID = base.Columns["UserID"];
				this.columnPolicyData = base.Columns["PolicyData"];
				this.columnLoginState = base.Columns["LoginState"];
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitClass()
			{
				this.columnApplicationID = new global::System.Data.DataColumn("ApplicationID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnApplicationID);
				this.columnRoleID = new global::System.Data.DataColumn("RoleID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnRoleID);
				this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnUserID);
				this.columnPolicyData = new global::System.Data.DataColumn("PolicyData", typeof(byte), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnPolicyData);
				this.columnLoginState = new global::System.Data.DataColumn("LoginState", typeof(int), null, global::System.Data.MappingType.Element);
				base.Columns.Add(this.columnLoginState);
				this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {this.columnApplicationID, this.columnRoleID, this.columnUserID}, true));
				this.columnApplicationID.AllowDBNull = false;
				this.columnRoleID.AllowDBNull = false;
				this.columnUserID.AllowDBNull = false;
				this.columnLoginState.AllowDBNull = false;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow NewSPUserRoleRow()
			{
				return ((SPUserRoleRow) (this.NewRow()));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
			{
				return new SPUserRoleRow(builder);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override global::System.Type GetRowType()
			{
				return typeof(SPUserRoleRow);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if (this.SPUserRoleRowChangedEvent != null)
				{
					if (SPUserRoleRowChangedEvent != null)
						SPUserRoleRowChangedEvent(this, new SPUserRoleRowChangeEvent(((SPUserRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if (this.SPUserRoleRowChangingEvent != null)
				{
					if (SPUserRoleRowChangingEvent != null)
						SPUserRoleRowChangingEvent(this, new SPUserRoleRowChangeEvent(((SPUserRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if (this.SPUserRoleRowDeletedEvent != null)
				{
					if (SPUserRoleRowDeletedEvent != null)
						SPUserRoleRowDeletedEvent(this, new SPUserRoleRowChangeEvent(((SPUserRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if (this.SPUserRoleRowDeletingEvent != null)
				{
					if (SPUserRoleRowDeletingEvent != null)
						SPUserRoleRowDeletingEvent(this, new SPUserRoleRowChangeEvent(((SPUserRoleRow) e.Row), e.Action));
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void RemoveSPUserRoleRow(SPUserRoleRow row)
			{
				this.Rows.Remove(row);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
			{
				global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
				global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
				dsUserSecurity ds = new dsUserSecurity();
				global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
				any1.Namespace = "http://www.w3.org/2001/XMLSchema";
				any1.MinOccurs = new decimal(0);
				any1.MaxOccurs = decimal.MaxValue;
				any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any1);
				global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
				any2.MinOccurs = new decimal(1);
				any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
				sequence.Items.Add(any2);
				global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute1.Name = "namespace";
				attribute1.FixedValue = ds.Namespace;
				type.Attributes.Add(attribute1);
				global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
				attribute2.Name = "tableTypeName";
				attribute2.FixedValue = "SPUserRoleDataTable";
				type.Attributes.Add(attribute2);
				type.Particle = sequence;
				global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
				if (xs.Contains(dsSchema.TargetNamespace))
				{
					global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
					global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
					try
					{
						global::System.Xml.Schema.XmlSchema schema = null;
						dsSchema.Write(s1);
						global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
						while (schemas.MoveNext())
						{
							schema = (global::System.Xml.Schema.XmlSchema) schemas.Current;
							s2.SetLength(0);
							schema.Write(s2);
							if (s1.Length == s2.Length)
							{
								s1.Position = 0;
								s2.Position = 0;
								
								while ((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))
								{
									
									
								}
								if (s1.Position == s1.Length)
								{
									return type;
								}
							}
							
						}
					}
					finally
					{
						if (s1 != null)
						{
							s1.Close();
						}
						if (s2 != null)
						{
							s2.Close();
						}
					}
				}
				xs.Add(dsSchema);
				return type;
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPApplicationRow : global::System.Data.DataRow
		{
			
			
			private SPApplicationDataTable tableSPApplication;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPApplicationRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPApplication = (SPApplicationDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int ApplicationID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPApplication.ApplicationIDColumn]);
				}
				set
				{
					this[this.tableSPApplication.ApplicationIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Name
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPApplication.NameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'SPApplication\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPApplication.NameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Note
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPApplication.NoteColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'SPApplication\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPApplication.NoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNameNull()
			{
				return this.IsNull(this.tableSPApplication.NameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNameNull()
			{
				this[this.tableSPApplication.NameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteNull()
			{
				return this.IsNull(this.tableSPApplication.NoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteNull()
			{
				this[this.tableSPApplication.NoteColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow[] GetSPUserRoleRows()
			{
				if (this.Table.ChildRelations["SPApplicationUserRole_FK"] == null)
				{
					return new SPUserRoleRow[- 1+ 1];
				}
				else
				{
					return ((SPUserRoleRow[]) (base.GetChildRows(this.Table.ChildRelations["SPApplicationUserRole_FK"])));
				}
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPRoleRow : global::System.Data.DataRow
		{
			
			
			private SPRoleDataTable tableSPRole;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPRoleRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPRole = (SPRoleDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int RoleID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPRole.RoleIDColumn]);
				}
				set
				{
					this[this.tableSPRole.RoleIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string RoleName
			{
				get
				{
					return System.Convert.ToString(this[this.tableSPRole.RoleNameColumn]);
				}
				set
				{
					this[this.tableSPRole.RoleNameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Note
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPRole.NoteColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'SPRole\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPRole.NoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime CreateDate
			{
				get
				{
					return System.Convert.ToDateTime(this[this.tableSPRole.CreateDateColumn]);
				}
				set
				{
					this[this.tableSPRole.CreateDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime ModifiedDate
			{
				get
				{
					try
					{
						return System.Convert.ToDateTime(this[this.tableSPRole.ModifiedDateColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'ModifiedDate\' in table \'SPRole\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPRole.ModifiedDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteNull()
			{
				return this.IsNull(this.tableSPRole.NoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteNull()
			{
				this[this.tableSPRole.NoteColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsModifiedDateNull()
			{
				return this.IsNull(this.tableSPRole.ModifiedDateColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetModifiedDateNull()
			{
				this[this.tableSPRole.ModifiedDateColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow[] GetSPUserRoleRows()
			{
				if (this.Table.ChildRelations["SPRoleUserRole_Fk"] == null)
				{
					return new SPUserRoleRow[- 1+ 1];
				}
				else
				{
					return ((SPUserRoleRow[]) (base.GetChildRows(this.Table.ChildRelations["SPRoleUserRole_Fk"])));
				}
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPUserRow : global::System.Data.DataRow
		{
			
			
			private SPUserDataTable tableSPUser;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPUserRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPUser = (SPUserDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int UserID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUser.UserIDColumn]);
				}
				set
				{
					this[this.tableSPUser.UserIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string UserName
			{
				get
				{
					return System.Convert.ToString(this[this.tableSPUser.UserNameColumn]);
				}
				set
				{
					this[this.tableSPUser.UserNameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string FirstName
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPUser.FirstNameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'SPUser\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPUser.FirstNameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string LastName
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPUser.LastNameColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'SPUser\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPUser.LastNameColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public string Note
			{
				get
				{
					try
					{
						return System.Convert.ToString(this[this.tableSPUser.NoteColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'SPUser\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPUser.NoteColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime CreateDate
			{
				get
				{
					return System.Convert.ToDateTime(this[this.tableSPUser.CreateDateColumn]);
				}
				set
				{
					this[this.tableSPUser.CreateDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public DateTime ModifiedDate
			{
				get
				{
					try
					{
						return System.Convert.ToDateTime(this[this.tableSPUser.ModifiedDateColumn]);
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'ModifiedDate\' in table \'SPUser\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPUser.ModifiedDateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int EmployeeID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUser.EmployeeIDColumn]);
				}
				set
				{
					this[this.tableSPUser.EmployeeIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsAdmin
			{
				get
				{
					return System.Convert.ToBoolean(this[this.tableSPUser.IsAdminColumn]);
				}
				set
				{
					this[this.tableSPUser.IsAdminColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsFirstNameNull()
			{
				return this.IsNull(this.tableSPUser.FirstNameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetFirstNameNull()
			{
				this[this.tableSPUser.FirstNameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsLastNameNull()
			{
				return this.IsNull(this.tableSPUser.LastNameColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetLastNameNull()
			{
				this[this.tableSPUser.LastNameColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsNoteNull()
			{
				return this.IsNull(this.tableSPUser.NoteColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetNoteNull()
			{
				this[this.tableSPUser.NoteColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsModifiedDateNull()
			{
				return this.IsNull(this.tableSPUser.ModifiedDateColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetModifiedDateNull()
			{
				this[this.tableSPUser.ModifiedDateColumn] = global::System.Convert.DBNull;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow[] GetSPUserRoleRows()
			{
				if (this.Table.ChildRelations["FK_SPUserRole"] == null)
				{
					return new SPUserRoleRow[- 1+ 1];
				}
				else
				{
					return ((SPUserRoleRow[]) (base.GetChildRows(this.Table.ChildRelations["FK_SPUserRole"])));
				}
			}
		}
		
		///<summary>
		///Represents strongly named DataRow class.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public partial class SPUserRoleRow : global::System.Data.DataRow
		{
			
			
			private SPUserRoleDataTable tableSPUserRole;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal SPUserRoleRow(global::System.Data.DataRowBuilder rb) : base(rb)
			{
				this.tableSPUserRole = (SPUserRoleDataTable) this.Table;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int ApplicationID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUserRole.ApplicationIDColumn]);
				}
				set
				{
					this[this.tableSPUserRole.ApplicationIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int RoleID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUserRole.RoleIDColumn]);
				}
				set
				{
					this[this.tableSPUserRole.RoleIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int UserID
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUserRole.UserIDColumn]);
				}
				set
				{
					this[this.tableSPUserRole.UserIDColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public byte[] PolicyData
			{
				get
				{
					try
					{
						return ((byte[]) (this[this.tableSPUserRole.PolicyDataColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw (new global::System.Data.StrongTypingException("The value for column \'PolicyData\' in table \'SPUserRole\' is DBNull.", e));
					}
				}
				set
				{
					this[this.tableSPUserRole.PolicyDataColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public int LoginState
			{
				get
				{
					return System.Convert.ToInt32(this[this.tableSPUserRole.LoginStateColumn]);
				}
				set
				{
					this[this.tableSPUserRole.LoginStateColumn] = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow SPUserRow
			{
				get
				{
					return ((SPUserRow) (this.GetParentRow(this.Table.ParentRelations["FK_SPUserRole"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["FK_SPUserRole"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow SPRoleRow
			{
				get
				{
					return ((SPRoleRow) (this.GetParentRow(this.Table.ParentRelations["SPRoleUserRole_Fk"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["SPRoleUserRole_Fk"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow SPApplicationRow
			{
				get
				{
					return ((SPApplicationRow) (this.GetParentRow(this.Table.ParentRelations["SPApplicationUserRole_FK"])));
				}
				set
				{
					this.SetParentRow(value, this.Table.ParentRelations["SPApplicationUserRole_FK"]);
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool IsPolicyDataNull()
			{
				return this.IsNull(this.tableSPUserRole.PolicyDataColumn);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public void SetPolicyDataNull()
			{
				this[this.tableSPUserRole.PolicyDataColumn] = global::System.Convert.DBNull;
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPApplicationRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPApplicationRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRowChangeEvent(SPApplicationRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPRoleRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPRoleRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRowChangeEvent(SPRoleRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPUserRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPUserRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRowChangeEvent(SPUserRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
		
		///<summary>
		///Row event argument class
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]public class SPUserRoleRowChangeEvent : global::System.EventArgs
		{
			
			
			private SPUserRoleRow eventRow;
			
			private global::System.Data.DataRowAction eventAction;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRowChangeEvent(SPUserRoleRow row, global::System.Data.DataRowAction action)
			{
				this.eventRow = row;
				this.eventAction = action;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleRow Row
			{
				get
				{
					return this.eventRow;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.eventAction;
				}
			}
		}
	}
	
	namespace dsUserSecurityTableAdapters
	{
		
		///<summary>
		///Represents the connection and commands used to retrieve and save data.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class SPApplicationTableAdapter : global::System.ComponentModel.Component
		{
			
			
			private global::System.Data.SqlClient.SqlDataAdapter _adapter;
			
			private global::System.Data.SqlClient.SqlConnection _connection;
			
			private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
			
			private bool _clearBeforeFill;
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPApplicationTableAdapter()
			{
				this.ClearBeforeFill = true;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
			{
				get
				{
					if (this._adapter == null)
					{
						this.InitAdapter();
					}
					return this._adapter;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
			{
				get
				{
					if (this._connection == null)
					{
						this.InitConnection();
					}
					return this._connection;
				}
				set
				{
					this._connection = value;
					if (this.Adapter.InsertCommand != null)
					{
						this.Adapter.InsertCommand.Connection = value;
					}
					if (this.Adapter.DeleteCommand != null)
					{
						this.Adapter.DeleteCommand.Connection = value;
					}
					if (this.Adapter.UpdateCommand != null)
					{
						this.Adapter.UpdateCommand.Connection = value;
					}
					int i = 0;
					while (i < this.CommandCollection.Length)
					{
						if (!(this.CommandCollection(i)) == null)
						{
							((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
						}
						i = i + 1;
					}
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
			{
				get
				{
					if (this._commandCollection == null)
					{
						this.InitCommandCollection();
					}
					return this._commandCollection;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
			{
				get
				{
					return this._clearBeforeFill;
				}
				set
				{
					this._clearBeforeFill = value;
				}
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
			{
				this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
				global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
				tableMapping.SourceTable = "Table";
				tableMapping.DataSetTable = "SPApplication";
				tableMapping.ColumnMappings.Add("ApplicationID", "ApplicationID");
				tableMapping.ColumnMappings.Add("Name", "Name");
				tableMapping.ColumnMappings.Add("Note", "Note");
				this._adapter.TableMappings.Add(tableMapping);
				this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.DeleteCommand.Connection = this.Connection;
				this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPApplication] WHERE (([ApplicationID] = @Original_Application" + "ID) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR ([Name] = @Original_Name)) AND" + " ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Original_Note)))";
				this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
				this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.InsertCommand.Connection = this.Connection;
				this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPApplication] ([Name], [Note]) VALUES (@Name, @Note);" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT" + " ApplicationID, Name, Note FROM SPApplication WHERE (ApplicationID = SCOPE_IDENT" + "ITY())";
				this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
				this._adapter.UpdateCommand.Connection = this.Connection;
				this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SPApplication] SET [Name] = @Name, [Note] = @Note WHERE (([Applicat" + "ionID] = @Original_ApplicationID) AND ((@IsNull_Name = 1 AND [Name] IS NULL) OR " + "([Name] = @Original_Name)) AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note]" + " = @Original_Note)));" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT ApplicationID, Name, Note FROM SPApplication WHERE" + " (ApplicationID = @ApplicationID)";
				this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
				this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
			{
				this._connection = new global::System.Data.SqlClient.SqlConnection();
				this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
			{
				this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
				this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
				this._commandCollection[0].Connection = this.Connection;
				this._commandCollection[0].CommandText = "SELECT ApplicationID, Name, Note FROM dbo.SPApplication";
				this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int Fill(dsUserSecurity.SPApplicationDataTable dataTable)
			{
				this.Adapter.SelectCommand = this.CommandCollection(0);
				if (this.ClearBeforeFill == true)
				{
					dataTable.Clear();
				}
				int returnValue = this.Adapter.Fill(dataTable);
				return returnValue;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual dsUserSecurity.SPApplicationDataTable GetData()
			{
				this.Adapter.SelectCommand = this.CommandCollection(0);
				dsUserSecurity.SPApplicationDataTable dataTable = new dsUserSecurity.SPApplicationDataTable();
				this.Adapter.Fill(dataTable);
				return dataTable;
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity.SPApplicationDataTable dataTable)
			{
				return this.Adapter.Update(dataTable);
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity dataSet)
			{
				return this.Adapter.Update(dataSet, "SPApplication");
			}
			
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
			{
				return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
			}
			
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
				{
					return this.Adapter.Update(dataRows);
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(int Original_ApplicationID, string Original_Name, string Original_Note)
				{
					this.Adapter.DeleteCommand.Parameters[0].Value = System.Convert.ToInt32(Original_ApplicationID);
					if (Original_Name == null)
					{
						this.Adapter.DeleteCommand.Parameters[1].Value = (object) (1);
						this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.DeleteCommand.Parameters[1].Value = (object) (0);
						this.Adapter.DeleteCommand.Parameters[2].Value = System.Convert.ToString(Original_Name);
					}
					if (Original_Note == null)
					{
						this.Adapter.DeleteCommand.Parameters[3].Value = (object) (1);
						this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.DeleteCommand.Parameters[3].Value = (object) (0);
						this.Adapter.DeleteCommand.Parameters[4].Value = System.Convert.ToString(Original_Note);
					}
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
					if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.DeleteCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.DeleteCommand.Connection.Close();
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string Name, string Note)
				{
					if (Name == null)
					{
						this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.InsertCommand.Parameters[0].Value = System.Convert.ToString(Name);
					}
					if (Note == null)
					{
						this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Note);
					}
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
					if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.InsertCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.InsertCommand.Connection.Close();
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string Name, string Note, int Original_ApplicationID, string Original_Name, string Original_Note, int ApplicationID)
				{
					if (Name == null)
					{
						this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[0].Value = System.Convert.ToString(Name);
					}
					if (Note == null)
					{
						this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[1].Value = System.Convert.ToString(Note);
					}
					this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToInt32(Original_ApplicationID);
					if (Original_Name == null)
					{
						this.Adapter.UpdateCommand.Parameters[3].Value = (object) (1);
						this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[3].Value = (object) (0);
						this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToString(Original_Name);
					}
					if (Original_Note == null)
					{
						this.Adapter.UpdateCommand.Parameters[5].Value = (object) (1);
						this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
					}
					else
					{
						this.Adapter.UpdateCommand.Parameters[5].Value = (object) (0);
						this.Adapter.UpdateCommand.Parameters[6].Value = System.Convert.ToString(Original_Note);
					}
					this.Adapter.UpdateCommand.Parameters[7].Value = System.Convert.ToInt32(ApplicationID);
					global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
					if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
					{
						this.Adapter.UpdateCommand.Connection.Open();
					}
					try
					{
						int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
						return returnValue;
					}
					finally
					{
						if (previousConnectionState == global::System.Data.ConnectionState.Closed)
						{
							this.Adapter.UpdateCommand.Connection.Close();
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string Name, string Note, int Original_ApplicationID, string Original_Name, string Original_Note)
				{
					return this.Update(Name, Note, Original_ApplicationID, Original_Name, Original_Note, Original_ApplicationID);
				}
			}
			
			///<summary>
			///Represents the connection and commands used to retrieve and save data.
			///</summary>
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class SPRoleTableAdapter : global::System.ComponentModel.Component
			{
				
				
				private global::System.Data.SqlClient.SqlDataAdapter _adapter;
				
				private global::System.Data.SqlClient.SqlConnection _connection;
				
				private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
				
				private bool _clearBeforeFill;
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPRoleTableAdapter()
				{
					this.ClearBeforeFill = true;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
				{
					get
					{
						if (this._adapter == null)
						{
							this.InitAdapter();
						}
						return this._adapter;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
				{
					get
					{
						if (this._connection == null)
						{
							this.InitConnection();
						}
						return this._connection;
					}
					set
					{
						this._connection = value;
						if (this.Adapter.InsertCommand != null)
						{
							this.Adapter.InsertCommand.Connection = value;
						}
						if (this.Adapter.DeleteCommand != null)
						{
							this.Adapter.DeleteCommand.Connection = value;
						}
						if (this.Adapter.UpdateCommand != null)
						{
							this.Adapter.UpdateCommand.Connection = value;
						}
						int i = 0;
						while (i < this.CommandCollection.Length)
						{
							if (!(this.CommandCollection(i)) == null)
							{
								((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
							}
							i = i + 1;
						}
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
				{
					get
					{
						if (this._commandCollection == null)
						{
							this.InitCommandCollection();
						}
						return this._commandCollection;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
				{
					get
					{
						return this._clearBeforeFill;
					}
					set
					{
						this._clearBeforeFill = value;
					}
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
				{
					this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
					global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
					tableMapping.SourceTable = "Table";
					tableMapping.DataSetTable = "SPRole";
					tableMapping.ColumnMappings.Add("RoleID", "RoleID");
					tableMapping.ColumnMappings.Add("RoleName", "RoleName");
					tableMapping.ColumnMappings.Add("Note", "Note");
					tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
					tableMapping.ColumnMappings.Add("ModifiedDate", "ModifiedDate");
					this._adapter.TableMappings.Add(tableMapping);
					this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.DeleteCommand.Connection = this.Connection;
					this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPRole] WHERE (([RoleID] = @Original_RoleID) AND ([RoleName] =" + " @Original_RoleName) AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Or" + "iginal_Note)) AND ([CreateDate] = @Original_CreateDate) AND ((@IsNull_ModifiedDa" + "te = 1 AND [ModifiedDate] IS NULL) OR ([ModifiedDate] = @Original_ModifiedDate))" + ")";
					this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
					this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.InsertCommand.Connection = this.Connection;
					this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPRole] ([RoleName], [Note], [CreateDate], [ModifiedDate]) VAL" + "UES (@RoleName, @Note, @CreateDate, @ModifiedDate);" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT RoleID, RoleName, No" + "te, CreateDate, ModifiedDate FROM SPRole WHERE (RoleID = SCOPE_IDENTITY())";
					this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RoleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
					this._adapter.UpdateCommand.Connection = this.Connection;
					this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SPRole] SET [RoleName] = @RoleName, [Note] = @Note, [CreateDate] = " + "@CreateDate, [ModifiedDate] = @ModifiedDate WHERE (([RoleID] = @Original_RoleID)" + " AND ([RoleName] = @Original_RoleName) AND ((@IsNull_Note = 1 AND [Note] IS NULL" + ") OR ([Note] = @Original_Note)) AND ([CreateDate] = @Original_CreateDate) AND ((" + "@IsNull_ModifiedDate = 1 AND [ModifiedDate] IS NULL) OR ([ModifiedDate] = @Origi" + "nal_ModifiedDate)));" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT RoleID, RoleName, Note, CreateDate, ModifiedDate FR" + "OM SPRole WHERE (RoleID = @RoleID)";
					this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RoleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
					this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RoleID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
				{
					this._connection = new global::System.Data.SqlClient.SqlConnection();
					this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
				{
					this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
					this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
					this._commandCollection[0].Connection = this.Connection;
					this._commandCollection[0].CommandText = "SELECT RoleID, RoleName, Note, CreateDate, ModifiedDate FROM dbo.SPRole";
					this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int Fill(dsUserSecurity.SPRoleDataTable dataTable)
				{
					this.Adapter.SelectCommand = this.CommandCollection(0);
					if (this.ClearBeforeFill == true)
					{
						dataTable.Clear();
					}
					int returnValue = this.Adapter.Fill(dataTable);
					return returnValue;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual dsUserSecurity.SPRoleDataTable GetData()
				{
					this.Adapter.SelectCommand = this.CommandCollection(0);
					dsUserSecurity.SPRoleDataTable dataTable = new dsUserSecurity.SPRoleDataTable();
					this.Adapter.Fill(dataTable);
					return dataTable;
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity.SPRoleDataTable dataTable)
				{
					return this.Adapter.Update(dataTable);
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity dataSet)
				{
					return this.Adapter.Update(dataSet, "SPRole");
				}
				
				[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
				{
					return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
				}
				
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
					{
						return this.Adapter.Update(dataRows);
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(int Original_RoleID, string Original_RoleName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate)
					{
						this.Adapter.DeleteCommand.Parameters[0].Value = System.Convert.ToInt32(Original_RoleID);
						if (Original_RoleName == null)
						{
							throw (new global::System.ArgumentNullException("Original_RoleName"));
						}
						else
						{
							this.Adapter.DeleteCommand.Parameters[1].Value = System.Convert.ToString(Original_RoleName);
						}
						if (Original_Note == null)
						{
							this.Adapter.DeleteCommand.Parameters[2].Value = (object) (1);
							this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.DeleteCommand.Parameters[2].Value = (object) (0);
							this.Adapter.DeleteCommand.Parameters[3].Value = System.Convert.ToString(Original_Note);
						}
						this.Adapter.DeleteCommand.Parameters[4].Value = System.Convert.ToDateTime(Original_CreateDate);
						if (Original_ModifiedDate.HasValue == true)
						{
							this.Adapter.DeleteCommand.Parameters[5].Value = (object) (0);
							this.Adapter.DeleteCommand.Parameters[6].Value = System.Convert.ToDateTime(Original_ModifiedDate.Value);
						}
						else
						{
							this.Adapter.DeleteCommand.Parameters[5].Value = (object) (1);
							this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
						}
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
						if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.DeleteCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.DeleteCommand.Connection.Close();
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string RoleName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate)
					{
						if (RoleName == null)
						{
							throw (new global::System.ArgumentNullException("RoleName"));
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[0].Value = System.Convert.ToString(RoleName);
						}
						if (Note == null)
						{
							this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(Note);
						}
						this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToDateTime(CreateDate);
						if (ModifiedDate.HasValue == true)
						{
							this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToDateTime(ModifiedDate.Value);
						}
						else
						{
							this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
						}
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
						if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.InsertCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.InsertCommand.Connection.Close();
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string RoleName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate, int Original_RoleID, string Original_RoleName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate, int RoleID)
					{
						if (RoleName == null)
						{
							throw (new global::System.ArgumentNullException("RoleName"));
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[0].Value = System.Convert.ToString(RoleName);
						}
						if (Note == null)
						{
							this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[1].Value = System.Convert.ToString(Note);
						}
						this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToDateTime(CreateDate);
						if (ModifiedDate.HasValue == true)
						{
							this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToDateTime(ModifiedDate.Value);
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
						}
						this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToInt32(Original_RoleID);
						if (Original_RoleName == null)
						{
							throw (new global::System.ArgumentNullException("Original_RoleName"));
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToString(Original_RoleName);
						}
						if (Original_Note == null)
						{
							this.Adapter.UpdateCommand.Parameters[6].Value = (object) (1);
							this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[6].Value = (object) (0);
							this.Adapter.UpdateCommand.Parameters[7].Value = System.Convert.ToString(Original_Note);
						}
						this.Adapter.UpdateCommand.Parameters[8].Value = System.Convert.ToDateTime(Original_CreateDate);
						if (Original_ModifiedDate.HasValue == true)
						{
							this.Adapter.UpdateCommand.Parameters[9].Value = (object) (0);
							this.Adapter.UpdateCommand.Parameters[10].Value = System.Convert.ToDateTime(Original_ModifiedDate.Value);
						}
						else
						{
							this.Adapter.UpdateCommand.Parameters[9].Value = (object) (1);
							this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
						}
						this.Adapter.UpdateCommand.Parameters[11].Value = System.Convert.ToInt32(RoleID);
						global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
						if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
						{
							this.Adapter.UpdateCommand.Connection.Open();
						}
						try
						{
							int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
							return returnValue;
						}
						finally
						{
							if (previousConnectionState == global::System.Data.ConnectionState.Closed)
							{
								this.Adapter.UpdateCommand.Connection.Close();
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string RoleName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate, int Original_RoleID, string Original_RoleName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate)
					{
						return this.Update(RoleName, Note, CreateDate, ModifiedDate, Original_RoleID, Original_RoleName, Original_Note, Original_CreateDate, Original_ModifiedDate, Original_RoleID);
					}
				}
				
				///<summary>
				///Represents the connection and commands used to retrieve and save data.
				///</summary>
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class SPUserTableAdapter : global::System.ComponentModel.Component
				{
					
					
					private global::System.Data.SqlClient.SqlDataAdapter _adapter;
					
					private global::System.Data.SqlClient.SqlConnection _connection;
					
					private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
					
					private bool _clearBeforeFill;
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserTableAdapter()
					{
						this.ClearBeforeFill = true;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
					{
						get
						{
							if (this._adapter == null)
							{
								this.InitAdapter();
							}
							return this._adapter;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
					{
						get
						{
							if (this._connection == null)
							{
								this.InitConnection();
							}
							return this._connection;
						}
						set
						{
							this._connection = value;
							if (this.Adapter.InsertCommand != null)
							{
								this.Adapter.InsertCommand.Connection = value;
							}
							if (this.Adapter.DeleteCommand != null)
							{
								this.Adapter.DeleteCommand.Connection = value;
							}
							if (this.Adapter.UpdateCommand != null)
							{
								this.Adapter.UpdateCommand.Connection = value;
							}
							int i = 0;
							while (i < this.CommandCollection.Length)
							{
								if (!(this.CommandCollection(i)) == null)
								{
									((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
								}
								i = i + 1;
							}
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
					{
						get
						{
							if (this._commandCollection == null)
							{
								this.InitCommandCollection();
							}
							return this._commandCollection;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
					{
						get
						{
							return this._clearBeforeFill;
						}
						set
						{
							this._clearBeforeFill = value;
						}
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
					{
						this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
						global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
						tableMapping.SourceTable = "Table";
						tableMapping.DataSetTable = "SPUser";
						tableMapping.ColumnMappings.Add("UserID", "UserID");
						tableMapping.ColumnMappings.Add("UserName", "UserName");
						tableMapping.ColumnMappings.Add("FirstName", "FirstName");
						tableMapping.ColumnMappings.Add("LastName", "LastName");
						tableMapping.ColumnMappings.Add("Note", "Note");
						tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
						tableMapping.ColumnMappings.Add("ModifiedDate", "ModifiedDate");
						tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
						tableMapping.ColumnMappings.Add("IsAdmin", "IsAdmin");
						this._adapter.TableMappings.Add(tableMapping);
						this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.DeleteCommand.Connection = this.Connection;
						this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPUser] WHERE (([UserID] = @Original_UserID) AND ([UserName] =" + " @Original_UserName) AND ((@IsNull_FirstName = 1 AND [FirstName] IS NULL) OR ([F" + "irstName] = @Original_FirstName)) AND ((@IsNull_LastName = 1 AND [LastName] IS N" + "ULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_Note = 1 AND [Note] IS " + "NULL) OR ([Note] = @Original_Note)) AND ([CreateDate] = @Original_CreateDate) AN" + "D ((@IsNull_ModifiedDate = 1 AND [ModifiedDate] IS NULL) OR ([ModifiedDate] = @O" + "riginal_ModifiedDate)) AND ([EmployeeID] = @Original_EmployeeID) AND ([IsAdmin] " + "= @Original_IsAdmin))";
						this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsAdmin", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAdmin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.InsertCommand.Connection = this.Connection;
						this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPUser] ([UserName], [FirstName], [LastName], [Note], [CreateD" + "ate], [ModifiedDate], [EmployeeID], [IsAdmin]) VALUES (@UserName, @FirstName, @L" + "astName, @Note, @CreateDate, @ModifiedDate, @EmployeeID, @IsAdmin);" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT User" + "ID, UserName, FirstName, LastName, Note, CreateDate, ModifiedDate, EmployeeID, I" + "sAdmin FROM SPUser WHERE (UserID = SCOPE_IDENTITY())";
						this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAdmin", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAdmin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
						this._adapter.UpdateCommand.Connection = this.Connection;
						this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SPUser] SET [UserName] = @UserName, [FirstName] = @FirstName, [Last" + "Name] = @LastName, [Note] = @Note, [CreateDate] = @CreateDate, [ModifiedDate] = " + "@ModifiedDate, [EmployeeID] = @EmployeeID, [IsAdmin] = @IsAdmin WHERE (([UserID]" + " = @Original_UserID) AND ([UserName] = @Original_UserName) AND ((@IsNull_FirstNa" + "me = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@I" + "sNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastName))" + " AND ((@IsNull_Note = 1 AND [Note] IS NULL) OR ([Note] = @Original_Note)) AND ([" + "CreateDate] = @Original_CreateDate) AND ((@IsNull_ModifiedDate = 1 AND [Modified" + "Date] IS NULL) OR ([ModifiedDate] = @Original_ModifiedDate)) AND ([EmployeeID] =" + " @Original_EmployeeID) AND ([IsAdmin] = @Original_IsAdmin));" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT UserID, Use" + "rName, FirstName, LastName, Note, CreateDate, ModifiedDate, EmployeeID, IsAdmin "
						+ "FROM SPUser WHERE (UserID = @UserID)";
						this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsAdmin", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAdmin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FirstName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FirstName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Note", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ModifiedDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ModifiedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsAdmin", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsAdmin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
					{
						this._connection = new global::System.Data.SqlClient.SqlConnection();
						this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
					{
						this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
						this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
						this._commandCollection[0].Connection = this.Connection;
						this._commandCollection[0].CommandText = "SELECT UserID, UserName, FirstName, LastName, Note, CreateDate, ModifiedDate, Emp" + "loyeeID, IsAdmin FROM dbo.SPUser";
						this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int Fill(dsUserSecurity.SPUserDataTable dataTable)
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						if (this.ClearBeforeFill == true)
						{
							dataTable.Clear();
						}
						int returnValue = this.Adapter.Fill(dataTable);
						return returnValue;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual dsUserSecurity.SPUserDataTable GetData()
					{
						this.Adapter.SelectCommand = this.CommandCollection(0);
						dsUserSecurity.SPUserDataTable dataTable = new dsUserSecurity.SPUserDataTable();
						this.Adapter.Fill(dataTable);
						return dataTable;
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity.SPUserDataTable dataTable)
					{
						return this.Adapter.Update(dataTable);
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity dataSet)
					{
						return this.Adapter.Update(dataSet, "SPUser");
					}
					
					[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
					{
						return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
					}
					
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
						{
							return this.Adapter.Update(dataRows);
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(int Original_UserID, string Original_UserName, string Original_FirstName, string Original_LastName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate, int Original_EmployeeID, bool Original_IsAdmin)
						{
							this.Adapter.DeleteCommand.Parameters[0].Value = System.Convert.ToInt32(Original_UserID);
							if (Original_UserName == null)
							{
								throw (new global::System.ArgumentNullException("Original_UserName"));
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[1].Value = System.Convert.ToString(Original_UserName);
							}
							if (Original_FirstName == null)
							{
								this.Adapter.DeleteCommand.Parameters[2].Value = (object) (1);
								this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[2].Value = (object) (0);
								this.Adapter.DeleteCommand.Parameters[3].Value = System.Convert.ToString(Original_FirstName);
							}
							if (Original_LastName == null)
							{
								this.Adapter.DeleteCommand.Parameters[4].Value = (object) (1);
								this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[4].Value = (object) (0);
								this.Adapter.DeleteCommand.Parameters[5].Value = System.Convert.ToString(Original_LastName);
							}
							if (Original_Note == null)
							{
								this.Adapter.DeleteCommand.Parameters[6].Value = (object) (1);
								this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[6].Value = (object) (0);
								this.Adapter.DeleteCommand.Parameters[7].Value = System.Convert.ToString(Original_Note);
							}
							this.Adapter.DeleteCommand.Parameters[8].Value = System.Convert.ToDateTime(Original_CreateDate);
							if (Original_ModifiedDate.HasValue == true)
							{
								this.Adapter.DeleteCommand.Parameters[9].Value = (object) (0);
								this.Adapter.DeleteCommand.Parameters[10].Value = System.Convert.ToDateTime(Original_ModifiedDate.Value);
							}
							else
							{
								this.Adapter.DeleteCommand.Parameters[9].Value = (object) (1);
								this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
							}
							this.Adapter.DeleteCommand.Parameters[11].Value = System.Convert.ToInt32(Original_EmployeeID);
							this.Adapter.DeleteCommand.Parameters[12].Value = System.Convert.ToBoolean(Original_IsAdmin);
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
							if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.DeleteCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.DeleteCommand.Connection.Close();
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(string UserName, string FirstName, string LastName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate, int EmployeeID, bool IsAdmin)
						{
							if (UserName == null)
							{
								throw (new global::System.ArgumentNullException("UserName"));
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[0].Value = System.Convert.ToString(UserName);
							}
							if (FirstName == null)
							{
								this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToString(FirstName);
							}
							if (LastName == null)
							{
								this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToString(LastName);
							}
							if (Note == null)
							{
								this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[3].Value = System.Convert.ToString(Note);
							}
							this.Adapter.InsertCommand.Parameters[4].Value = System.Convert.ToDateTime(CreateDate);
							if (ModifiedDate.HasValue == true)
							{
								this.Adapter.InsertCommand.Parameters[5].Value = System.Convert.ToDateTime(ModifiedDate.Value);
							}
							else
							{
								this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
							}
							this.Adapter.InsertCommand.Parameters[6].Value = System.Convert.ToInt32(EmployeeID);
							this.Adapter.InsertCommand.Parameters[7].Value = System.Convert.ToBoolean(IsAdmin);
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
							if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.InsertCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.InsertCommand.Connection.Close();
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string UserName, string FirstName, string LastName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate, int EmployeeID, bool IsAdmin, int Original_UserID, string Original_UserName, string Original_FirstName, string Original_LastName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate, int Original_EmployeeID, bool Original_IsAdmin, int UserID)
						{
							if (UserName == null)
							{
								throw (new global::System.ArgumentNullException("UserName"));
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[0].Value = System.Convert.ToString(UserName);
							}
							if (FirstName == null)
							{
								this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[1].Value = System.Convert.ToString(FirstName);
							}
							if (LastName == null)
							{
								this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToString(LastName);
							}
							if (Note == null)
							{
								this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[3].Value = System.Convert.ToString(Note);
							}
							this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToDateTime(CreateDate);
							if (ModifiedDate.HasValue == true)
							{
								this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToDateTime(ModifiedDate.Value);
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
							}
							this.Adapter.UpdateCommand.Parameters[6].Value = System.Convert.ToInt32(EmployeeID);
							this.Adapter.UpdateCommand.Parameters[7].Value = System.Convert.ToBoolean(IsAdmin);
							this.Adapter.UpdateCommand.Parameters[8].Value = System.Convert.ToInt32(Original_UserID);
							if (Original_UserName == null)
							{
								throw (new global::System.ArgumentNullException("Original_UserName"));
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[9].Value = System.Convert.ToString(Original_UserName);
							}
							if (Original_FirstName == null)
							{
								this.Adapter.UpdateCommand.Parameters[10].Value = (object) (1);
								this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[10].Value = (object) (0);
								this.Adapter.UpdateCommand.Parameters[11].Value = System.Convert.ToString(Original_FirstName);
							}
							if (Original_LastName == null)
							{
								this.Adapter.UpdateCommand.Parameters[12].Value = (object) (1);
								this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[12].Value = (object) (0);
								this.Adapter.UpdateCommand.Parameters[13].Value = System.Convert.ToString(Original_LastName);
							}
							if (Original_Note == null)
							{
								this.Adapter.UpdateCommand.Parameters[14].Value = (object) (1);
								this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[14].Value = (object) (0);
								this.Adapter.UpdateCommand.Parameters[15].Value = System.Convert.ToString(Original_Note);
							}
							this.Adapter.UpdateCommand.Parameters[16].Value = System.Convert.ToDateTime(Original_CreateDate);
							if (Original_ModifiedDate.HasValue == true)
							{
								this.Adapter.UpdateCommand.Parameters[17].Value = (object) (0);
								this.Adapter.UpdateCommand.Parameters[18].Value = System.Convert.ToDateTime(Original_ModifiedDate.Value);
							}
							else
							{
								this.Adapter.UpdateCommand.Parameters[17].Value = (object) (1);
								this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
							}
							this.Adapter.UpdateCommand.Parameters[19].Value = System.Convert.ToInt32(Original_EmployeeID);
							this.Adapter.UpdateCommand.Parameters[20].Value = System.Convert.ToBoolean(Original_IsAdmin);
							this.Adapter.UpdateCommand.Parameters[21].Value = System.Convert.ToInt32(UserID);
							global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
							if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
							{
								this.Adapter.UpdateCommand.Connection.Open();
							}
							try
							{
								int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
								return returnValue;
							}
							finally
							{
								if (previousConnectionState == global::System.Data.ConnectionState.Closed)
								{
									this.Adapter.UpdateCommand.Connection.Close();
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(string UserName, string FirstName, string LastName, string Note, DateTime CreateDate, global::System.Nullable<DateTime> ModifiedDate, int EmployeeID, bool IsAdmin, int Original_UserID, string Original_UserName, string Original_FirstName, string Original_LastName, string Original_Note, DateTime Original_CreateDate, global::System.Nullable<DateTime> Original_ModifiedDate, int Original_EmployeeID, bool Original_IsAdmin)
						{
							return this.Update(UserName, FirstName, LastName, Note, CreateDate, ModifiedDate, EmployeeID, IsAdmin, Original_UserID, Original_UserName, Original_FirstName, Original_LastName, Original_Note, Original_CreateDate, Original_ModifiedDate, Original_EmployeeID, Original_IsAdmin, Original_UserID);
						}
					}
					
					///<summary>
					///Represents the connection and commands used to retrieve and save data.
					///</summary>
					[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), global::System.ComponentModel.DesignerCategoryAttribute("code"), global::System.ComponentModel.ToolboxItem(true), global::System.ComponentModel.DataObjectAttribute(true), global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public partial class SPUserRoleTableAdapter : global::System.ComponentModel.Component
					{
						
						
						private global::System.Data.SqlClient.SqlDataAdapter _adapter;
						
						private global::System.Data.SqlClient.SqlConnection _connection;
						
						private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
						
						private bool _clearBeforeFill;
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public SPUserRoleTableAdapter()
						{
							this.ClearBeforeFill = true;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private global::System.Data.SqlClient.SqlDataAdapter Adapter
						{
							get
							{
								if (this._adapter == null)
								{
									this.InitAdapter();
								}
								return this._adapter;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]internal global::System.Data.SqlClient.SqlConnection Connection
						{
							get
							{
								if (this._connection == null)
								{
									this.InitConnection();
								}
								return this._connection;
							}
							set
							{
								this._connection = value;
								if (this.Adapter.InsertCommand != null)
								{
									this.Adapter.InsertCommand.Connection = value;
								}
								if (this.Adapter.DeleteCommand != null)
								{
									this.Adapter.DeleteCommand.Connection = value;
								}
								if (this.Adapter.UpdateCommand != null)
								{
									this.Adapter.UpdateCommand.Connection = value;
								}
								int i = 0;
								while (i < this.CommandCollection.Length)
								{
									if (!(this.CommandCollection(i)) == null)
									{
										((global::System.Data.SqlClient.SqlCommand) (this.CommandCollection(i))).Connection = value;
									}
									i = i + 1;
								}
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
						{
							get
							{
								if (this._commandCollection == null)
								{
									this.InitCommandCollection();
								}
								return this._commandCollection;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]public bool ClearBeforeFill
						{
							get
							{
								return this._clearBeforeFill;
							}
							set
							{
								this._clearBeforeFill = value;
							}
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitAdapter()
						{
							this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
							global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
							tableMapping.SourceTable = "Table";
							tableMapping.DataSetTable = "SPUserRole";
							tableMapping.ColumnMappings.Add("ApplicationID", "ApplicationID");
							tableMapping.ColumnMappings.Add("RoleID", "RoleID");
							tableMapping.ColumnMappings.Add("UserID", "UserID");
							tableMapping.ColumnMappings.Add("PolicyData", "PolicyData");
							tableMapping.ColumnMappings.Add("LoginState", "LoginState");
							this._adapter.TableMappings.Add(tableMapping);
							this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.DeleteCommand.Connection = this.Connection;
							this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPUserRole] WHERE (([ApplicationID] = @Original_ApplicationID)" + " AND ([RoleID] = @Original_RoleID) AND ([UserID] = @Original_UserID) AND ((@IsNu" + "ll_PolicyData = 1 AND [PolicyData] IS NULL) OR ([PolicyData] = @Original_PolicyD" + "ata)) AND ([LoginState] = @Original_LoginState))";
							this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PolicyData", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PolicyData", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoginState", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoginState", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.InsertCommand.Connection = this.Connection;
							this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPUserRole] ([ApplicationID], [RoleID], [UserID], [PolicyData]" + ", [LoginState]) VALUES (@ApplicationID, @RoleID, @UserID, @PolicyData, @LoginSta" + "te);" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT ApplicationID, RoleID, UserID, PolicyData, LoginState FROM SPUserRo" + "le WHERE (ApplicationID = @ApplicationID) AND (RoleID = @RoleID) AND (UserID = @" + "UserID)";
							this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PolicyData", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoginState", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoginState", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
							this._adapter.UpdateCommand.Connection = this.Connection;
							this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SPUserRole] SET [ApplicationID] = @ApplicationID, [RoleID] = @RoleI" + "D, [UserID] = @UserID, [PolicyData] = @PolicyData, [LoginState] = @LoginState WH" + "ERE (([ApplicationID] = @Original_ApplicationID) AND ([RoleID] = @Original_RoleI" + "D) AND ([UserID] = @Original_UserID) AND ((@IsNull_PolicyData = 1 AND [PolicyDat" + "a] IS NULL) OR ([PolicyData] = @Original_PolicyData)) AND ([LoginState] = @Origi" + "nal_LoginState));" + global::Microsoft.VisualBasic.Strings.ChrW(13) + global::Microsoft.VisualBasic.Strings.ChrW(10) + "SELECT ApplicationID, RoleID, UserID, PolicyData, LoginState " + "FROM SPUserRole WHERE (ApplicationID = @ApplicationID) AND (RoleID = @RoleID) AN" + "D (UserID = @UserID)";
							this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PolicyData", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LoginState", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoginState", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ApplicationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ApplicationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RoleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RoleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PolicyData", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PolicyData", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PolicyData", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
							this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LoginState", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LoginState", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitConnection()
						{
							this._connection = new global::System.Data.SqlClient.SqlConnection();
							this._connection.ConnectionString = global::SoftLogik.Win.My.Settings.Default.DBConnection;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]private void InitCommandCollection()
						{
							this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
							this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
							this._commandCollection[0].Connection = this.Connection;
							this._commandCollection[0].CommandText = "SELECT ApplicationID, RoleID, UserID, PolicyData, LoginState FROM dbo.SPUserRole";
							this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]public virtual int Fill(dsUserSecurity.SPUserRoleDataTable dataTable)
						{
							this.Adapter.SelectCommand = this.CommandCollection(0);
							if (this.ClearBeforeFill == true)
							{
								dataTable.Clear();
							}
							int returnValue = this.Adapter.Fill(dataTable);
							return returnValue;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]public virtual dsUserSecurity.SPUserRoleDataTable GetData()
						{
							this.Adapter.SelectCommand = this.CommandCollection(0);
							dsUserSecurity.SPUserRoleDataTable dataTable = new dsUserSecurity.SPUserRoleDataTable();
							this.Adapter.Fill(dataTable);
							return dataTable;
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity.SPUserRoleDataTable dataTable)
						{
							return this.Adapter.Update(dataTable);
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(dsUserSecurity dataSet)
						{
							return this.Adapter.Update(dataSet, "SPUserRole");
						}
						
						[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow dataRow)
						{
							return this.Adapter.Update(new global::System.Data.DataRow[] {dataRow});
						}
						
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]public virtual int Update(global::System.Data.DataRow[] dataRows)
							{
								return this.Adapter.Update(dataRows);
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]public virtual int Delete(int Original_ApplicationID, int Original_RoleID, int Original_UserID, byte[] Original_PolicyData, int Original_LoginState)
							{
								this.Adapter.DeleteCommand.Parameters[0].Value = System.Convert.ToInt32(Original_ApplicationID);
								this.Adapter.DeleteCommand.Parameters[1].Value = System.Convert.ToInt32(Original_RoleID);
								this.Adapter.DeleteCommand.Parameters[2].Value = System.Convert.ToInt32(Original_UserID);
								if (Original_PolicyData == null)
								{
									this.Adapter.DeleteCommand.Parameters[3].Value = (object) (1);
									this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.DeleteCommand.Parameters[3].Value = (object) (0);
									this.Adapter.DeleteCommand.Parameters[4].Value = (byte[]) Original_PolicyData;
								}
								this.Adapter.DeleteCommand.Parameters[5].Value = System.Convert.ToInt32(Original_LoginState);
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
								if ((this.Adapter.DeleteCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.DeleteCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.DeleteCommand.Connection.Close();
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]public virtual int Insert(int ApplicationID, int RoleID, int UserID, byte[] PolicyData, int LoginState)
							{
								this.Adapter.InsertCommand.Parameters[0].Value = System.Convert.ToInt32(ApplicationID);
								this.Adapter.InsertCommand.Parameters[1].Value = System.Convert.ToInt32(RoleID);
								this.Adapter.InsertCommand.Parameters[2].Value = System.Convert.ToInt32(UserID);
								if (PolicyData == null)
								{
									this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.InsertCommand.Parameters[3].Value = (byte[]) PolicyData;
								}
								this.Adapter.InsertCommand.Parameters[4].Value = System.Convert.ToInt32(LoginState);
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
								if ((this.Adapter.InsertCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.InsertCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.InsertCommand.Connection.Close();
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(int ApplicationID, int RoleID, int UserID, byte[] PolicyData, int LoginState, int Original_ApplicationID, int Original_RoleID, int Original_UserID, byte[] Original_PolicyData, int Original_LoginState)
							{
								this.Adapter.UpdateCommand.Parameters[0].Value = System.Convert.ToInt32(ApplicationID);
								this.Adapter.UpdateCommand.Parameters[1].Value = System.Convert.ToInt32(RoleID);
								this.Adapter.UpdateCommand.Parameters[2].Value = System.Convert.ToInt32(UserID);
								if (PolicyData == null)
								{
									this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[3].Value = (byte[]) PolicyData;
								}
								this.Adapter.UpdateCommand.Parameters[4].Value = System.Convert.ToInt32(LoginState);
								this.Adapter.UpdateCommand.Parameters[5].Value = System.Convert.ToInt32(Original_ApplicationID);
								this.Adapter.UpdateCommand.Parameters[6].Value = System.Convert.ToInt32(Original_RoleID);
								this.Adapter.UpdateCommand.Parameters[7].Value = System.Convert.ToInt32(Original_UserID);
								if (Original_PolicyData == null)
								{
									this.Adapter.UpdateCommand.Parameters[8].Value = (object) (1);
									this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
								}
								else
								{
									this.Adapter.UpdateCommand.Parameters[8].Value = (object) (0);
									this.Adapter.UpdateCommand.Parameters[9].Value = (byte[]) Original_PolicyData;
								}
								this.Adapter.UpdateCommand.Parameters[10].Value = System.Convert.ToInt32(Original_LoginState);
								global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
								if ((this.Adapter.UpdateCommand.Connection.State && global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)
								{
									this.Adapter.UpdateCommand.Connection.Open();
								}
								try
								{
									int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
									return returnValue;
								}
								finally
								{
									if (previousConnectionState == global::System.Data.ConnectionState.Closed)
									{
										this.Adapter.UpdateCommand.Connection.Close();
									}
								}
							}
							
							[global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]public virtual int Update(byte[] PolicyData, int LoginState, int Original_ApplicationID, int Original_RoleID, int Original_UserID, byte[] Original_PolicyData, int Original_LoginState)
							{
								return this.Update(Original_ApplicationID, Original_RoleID, Original_UserID, PolicyData, LoginState, Original_ApplicationID, Original_RoleID, Original_UserID, Original_PolicyData, Original_LoginState);
							}
						}
					}
					
				}
